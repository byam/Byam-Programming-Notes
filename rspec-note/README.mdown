# RSpec Basic

Ruby on Railsにおけるテストは、「RSpec」というgemを利用して行います。

テストには、単体テストと結合テストの2種類があります。
単体テストとは、プログラムの最小単位であるメソッドが期待通りに動作するかを確認するテストのことです。
結合テストとは、複数のプログラムが連動して起こる一連の動作が期待通りになるかを確認するテストのことです。

* [1章「はじめに」](#start)

* [2章「単体テスト・モデル編①」](#model1)

    テストを作成するための言語であるRSpecの導入から、Pictweetのモデルクラスのテストコードの基礎的な書き方までを学びます。

* [3章「単体テスト・モデル編②」](#model2)

    引き続きモデルクラスのテストコードを作成します。テストを書く際に利用すると便利なfactory_girlというGemを紹介し、実際に利用してみます。

    * [factory_girlを導入](#model2_fg)
    * [テストコードを書く際の原則について学ぼう](#model2_rule)
    * [全ての条件を網羅したバリデーションテストを書こう](#model2_all)

* [4章「単体テスト・コントローラー編」](#controller)

    もうひとつの単体テストであるコントローラークラスのテストコードを作成していきます。factory_girlの応用的な使い方や、ダミーのデータを作成するためのGemであるFakerの利用方法なども学んでいきます。


<a name="start"></a>
# 1章「はじめに

#### Railsにおけるテストについて

Ruby on Railsにおいては、基本的にはモデルとコントローラのファイルに対してテストコードを作成します。その際はRSpecという独自の言語を利用します。

#### RSpec

RSpecは、Rubyを元に作成されたテストに特化した言語です。「rspec-rails」というGemをインストールすると、RSpecを利用できます。

基本的に、ひとつのプロダクションコードに対してはひとつのテストコードが必要です。
例えばRuby on Railsにおいては、モデルクラスやコントローラークラスひとつにつきひとつのテストコードを書かなければいけません。これは面倒に感じるかもしれませんが、それを補いなお余るほどのメリットも存在します。それは、主に以下の3つです。

* **仕様漏れを減らすことができる**

    テストをするにあたっては、対象のメソッドがどのような目的で作成されどんな挙動をしなければいけないのかということを全て洗い出します。結果的に仕様を良く確認することになり、バグを引き起こす仕様漏れを少なくすることができます。

* **リファクタリングや機能追加をしやすくなる**

    リファクタリングとは、コードをより綺麗なかたちに修正する作業のことです。一度テストを通過してしまえば、最終的な結果を維持しリファクタリングをするのが簡単になります。また、新たな機能を追加する際も、従来の箇所は間違いなく動いていることを確認できているので、その結果を崩さないようにするだけで安全に実装することができます。

* **楽しくコードを書ける**

    テストを通過するという快適な体験を重ねることで、コードを書く作業が楽しくなります。注意力が必要で神経をすり減らしやすいプログラミングという作業において、楽しくコードが書ける、ということは非常に重要です。

#### テストの種類

テストは、主に単体テストと統合テストという2種類に分類されます。単体テストとは、単体で動くプログラムが正常に動作するか確かめるテストのことです。統合テストとは、複数のプログラムが組み合わさった機能が正常に動作するか確かめるテストのことです。

* **単体テストとは**

    ひとつのプログラムのまとまりに関して、それ単体が正常に動くか確かめるテストのことを単体テストと呼びます。例えばRailsであれば、モデルクラスひとつ、コントローラークラスひとつにつきそれぞれテストコードを書きます。

* **統合テストとは**

    複数のプログラムが連動して行われる処理が意図した通りに行われるかを確かめるテストのことを統合テストと呼びます。例えばRailsであれば、ユーザーの新規登録における一連の処理をテストすることが考えられます。ユーザーの新規登録用画面から値を入力、送信して、データベースにレコードが追加されるまでの一連の流れをシミュレートするテストコードを書きます。






<a name="model1"></a>
# 2章「単体テスト・モデル編①」
Pictweetのテストコードを書いていきます。
まずは「rspec-rails」というGemをインストールし、RSpecを利用できるようにします。続いて、RSpecの設定を行います。その後、実際にRSpecのコードを書きながらRSpecの基礎文法を学んでいきます。

## RSpecの利用準備

### Gemをインストール

> rspecインストール

*Gemfile:追加*
```ruby
# テスト
gem 'rspec-rails', '~>3.1.0'
```

```sh
$cd ~/projects/pictweet
#pictweetのディレクトリに移動
$pwd
~/projects/pictweet
#pictweetのディレクトリに居ることを確認
$bundle install
#bundle installを実行
```


### RSpecの設定

> RSpec用の設定ファイルを作成
```sh
$ rails g rspec:install
      create  .rspec
      create  spec
      create  spec/spec_helper.rb
      create  spec/rails_helper.rb
```

* **rails_helper.rb**

    RailsにおいてRSpecを利用する際に、共通の設定を書いておくファイルです。各テスト用ファイルでこちらのファイルを読み込むことで、共通の設定や、メソッドを適用します。

* **spec_helper.rb**

    rails_helper.rbと同じくRSpec用の共通の設定を書いておくファイルですが、こちらはRSpecをRails無しで利用する際に利用します。

>`.rspec`に以下を追加
```sh
--format documentation
```

### RSpecが正常に利用できるか確かめる

RSpecを利用して書いたテストコードは、ターミナルからコマンドを打つことで全て自動的に実行されます。今はまだテストコードを作成していませんが、こちらのコマンドを試すことは可能なので、やってみましょう。

> 確かめる
```sh
$ bundle exec rspec
No examples found.

Finished in 0.0003 seconds (files took 0.15893 seconds to load)
0 examples, 0 failures
```


### Pictweetの元のコードを編集
テストコードを書く際に、バリデーションが正常に働くようにコードを修正します。

> app/views/devise/registrations/new.html.erbを以下のように編集

nicknameを入力するフォームを出力しているtext_fieldタグに付いているmaxlength: 6という記述を削除しましょう
```html
  <h2>Sign up</h2>
  <%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
    <%= devise_error_messages! %>

    <div class="field">
      <%= f.label :nickname %> <em>(6 characters maximum)</em><br>
      <%= f.text_field :nickname, autofocus: true %>
    </div>
 #省略
```


> app/models/user.rbを以下のように編集
```ruby
  class User < ActiveRecord::Base
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable
  has_many :tweets

  validates :nickname, presence: true, length: { maximum: 6 }

end
```



## モデルクラスのテストコードを書く

まずはじめに、Railsにおいて基礎となる単体テストであるモデルのバリデーションに関するテストコードを書きましょう。Pictweetには「userモデル」が存在するので、こちらに対応するテストコードを書いていきます。

### 事前に知っておくべきこと

* **RSpec用ディレクトリの構造**

RSpecによるテストコードが書かれたファイルのことを、specファイルと呼びます。全てのspecファイルは、先ほどの`rails g rspec:install`コマンドで生成された「specディレクトリ」の中に格納しておきます。

モデルに関するテスト用ファイルであれば`spec/models/`以下に、コントローラーに関するテスト用ファイルであれば`spec/controllers/`以下に格納されます。`app`ディレクトリ以下にあるテストの対象となるコードの在り処と対応させます。

* **specファイルの命名規則**

specファイルは`対応するクラス名_spec.rb`という名前になります。今回はまず「user.rb」に関するspecファイルを作成するので、その場合の名前は「user_spec.rb」になります

* **テストコードの基本**

続いて、「1 + 1が2になることを確かめる」という簡単なテストコードを例として、以下に挙げる基本的なテストコードの文法について解説していきます。

    【例】1 + 1が2になることを確かめるテストコード:

```ruby
describe 'hogehoge' do
  it '1 + 1は2になること' do
    expect(1 + 1).to eq 2
  end
end
```

上記のコードの概要を説明します。
まず、`describe`というキーワードでテストをグループ化します。
続いて、テスト1つ(example)として評価される`it do ~ end`のブロックの中に、`expect(X).to eq Y`という形式の式を書いていきます。これが、実際にテストが成功するかどうかチェックされる式(エクスペクテーション)になります。

それでは、以下に挙げるポイントについてそれぞれ見ていきましょう。

*  describe

    1行目の`describe`は、直後の`do ~ end`までのテストのまとまりを作ります。`describe`の後に続く`""`の中にはそのまとまりの説明を書きます。

* itとexample

    2行目の`it`はexampleと呼ばれる実際に動作するテストコードのまとまりを表します。`it`の後に続く`""`の中にはそのexampleの説明を書きます。

* エクスペクテーション

    実際に評価される式のことです。`it do ~ end`の間に書きます。上記の式では`expect(1 + 1).to eq 2`の部分がエクスペクテーションです。

* expect(X).to eq Y

    エクスペクテーションの文法です。xの部分に入れた式の値がYの部分の値と等しければ、テストが成功します。`eq`の部分を、マッチャと言います。

* マッチャ

    エクスペクテーションの中で、テストが成功する条件を示します。例えば`eq`は「等しければ」という意味になります。他にも
    `include`(含んでいれば)、`valid`(バリデーションされれば)など複数のマッチャが存在します。これらに関しては利用する時に再度説明します。



### 試しにバリデーションのテストを書いてみよう
今回はuser_spec.rbを作成し、ユーザーの新規作成時に設定されているバリデーションが正常に機能するかどうかを調べるテストコードを書きます。

> Pictweetのディレクトリに、spec/modelsディレクトリを作成
```sh
$ mkdir spec/models
```
> Pictweetのディレクトリに、spec/models/user_spec.rbを作成
```ruby
require 'rails_helper'
describe User do
  describe '#create' do
    it "is invalid without a nickname" do
    end
  end
end
```

`it ~ do`の間はそのexampleの説明を書きますが、ここは日本語でも問題ありません。今回は、英語で書いてみましょう。

では、この状態でテストを実行してみましょう。テストを実行するためには、ターミナルでbundle exec rspecというコマンドを実行します。

現状、user_spec.rbには中身のないテストコードが書かれている状態です。

> テストを実行
```sh
$ bundle exec rspec

User
  #create
    is invalid without a nickname

Finished in 0.00211 seconds (files took 6.02 seconds to load)
1 example, 0 failures
```

1行目の`require 'rails_helper'`は、rails_helper.rb内の記述を読み込むことで共通の設定を有効にしています。この1行目の記述は、全てのspecファイルに書き込みます。

3, 4行目に連続して`describe`が登場しています。`describe`は、このようにネスト(入れ子状)にすることができます。ここでは「Userクラスにあるcreateメソッドをテストするまとまり」であることを示しています。このように、`describe`と`do`の間にメソッド名を書く際は`#`をつけるのが慣習です。


### nicknameが空の場合登録できないことを確かめるテストコードを書くnicknameが空の場合登録できないことを確かめるテストコードを書く

ではここから「nicknameが空の場合登録できないことを確かめる」exampleを書いていきます。先ほどと同様、先にコードを示し解説する形で進めます。

> user_spec.rbを以下のように編集
```ruby
require 'rails_helper'
describe User do
  describe '#create' do
    it "is invalid without a nickname" do
     user = User.new(nickname: "", email: "kkk@gmail.com", password: "00000000", password_confirmation: "00000000")
     user.valid?
     expect(user.errors[:nickname]).to include("can't be blank")
    end
  end
end

```

**【5行目】テストしたいプロパティを持ったuserクラスのインスタンスを新規作成する**

スペックファイルの中では、そのRailsプロジェクトで作成しているモデルクラスを利用することができます。今回は「nicknameが空である場合登録できないこと」を確かめるテストコードを作成したいのでnicknameの値を空にし、それ以外は適当な値をセットした状態でuserクラスのインスタンスを作成しています。

**【6行目】作成したインスタンスがバリデーションによって保存ができない状態かチェックする**

続いて、新規作成したuserクラスのインスタンスがバリデーションに引っかかるかどうかを確かめる`valid?`メソッドを利用します。

* **valid?メソッド**

    `valid?`メソッドを利用すると、ActiveRecord::Baseを継承しているクラスのインスタンスを保存する際に「バリデーションにより保存ができない状態であるか」を確かめることができます。

* **errorsメソッド**

    `valid？`メソッドの返り値はtrue/falseですが、`valid?`メソッドを利用したインスタンス対して`errors`メソッドを利用すると、バリデーションにより保存ができない状態である場合なぜできないのかを確認することができます。

**【7行目】チェックした結果インスタンスが持つエラー文が期待したものであるか確かめる**

expectの引数に関して、`user.errors`に対してハッシュのバリューの取り出し方でカラム名を指定すると、そのカラムが原因のエラー文が入った配列を取り出すことができます。こちらに対して、`include`というマッチャを利用してエクスペクテーションを作っています。

* **includeマッチャ**

    includeマッチャは、引数にとった値がexpectの引数である配列に含まれているかをチェックすることができるマッチャです。

    今回の場合、「nicknameが空の場合はcan't be blankというエラーが出るはずだ」ということがわかっているため、`include("can't be blank")`のように書くことができます。実際にその通りになればこちらのエクスペクテーションはパスし、このコードは意図した動作をすると保証できます。

> テストを実行してみましょう。
```sh
$ bundle exec rspec

User
  #create
    is invalid without a nickname

Finished in 0.082 seconds (files took 2.66 seconds to load)
```


### 「emailが存在しなければ登録できない」ことを確かめるテスト

> user_spec.rb
```ruby
require 'rails_helper'
describe User do
  describe '#create' do
    it "is invalid without a nickname" do
     user = User.new(nickname: "", email: "kkk@gmail.com", password: "00000000", password_confirmation: "00000000")
     user.valid?
     expect(user.errors[:nickname]).to include("can't be blank")
    end
  end

  describe '#create' do
    it "is invalid without a email" do
     user = User.new(nickname: "bya", email: "", password: "00000000", password_confirmation: "00000000")
     user.valid?
     expect(user.errors[:email]).to include("can't be blank")
    end
  end
end
```

> テストを実行
```sh
$ bundle exec rspec

User
  #create
    is invalid without a nickname
  #create
    is invalid without a email

Finished in 0.07884 seconds (files took 2.43 seconds to load)
2 examples, 0 failures
```




<a name="model2"></a>
# 3章「単体テスト・モデル編②

factory_girlというgemを導入し、specファイルの記述を効率化します。また、テストコードを書く際には常に気をつけなければいけない原則があるので、そちらを学習していただきます。最後に、Pictweetのユーザー登録に関するテストコードを全て完成させていただきます。

<a name="model2_fg"></a>
## factory_girlを導入
現在user_spec.rbには2つのexampleが存在しますが、それぞれUserクラスのインスタンスを作成し値をセットしています。これを全てのexampleで行うのは大変です。そこで、factory_girlというgemを利用してこの作業を効率化しましょう。

### factory_girl

簡単にダミーのインスタンスを作成することができるGemです。他のファイルで予め各クラスのインスタンスに定めるプロパティを設定しておき、specファイルからメソッドを利用してその通りのインスタンスを作成します。factory_girlを利用すれば、user_spec.rbは以下のように短い記述にすることができます。

*user_spec.rb:*
```ruby
require 'rails_helper'

describe User do
  describe '#create' do

    it "is invalid without a nickname" do
      user = build(:user, nickname: nil)
      user.valid?
      expect(user.errors[:nickname]).to include("can't be blank")
    end

    it "is invalid without a email" do
      user = build(:user, email: nil)
      user.valid?
      expect(user.errors[:email]).to include("can't be blank")
    end

  end
end
```
Userクラスのインスタンスを作成している部分が随分短く記述されていることがわかります。

> Gemfileを編集。rspecと同じグループの中に追記
```ruby
group :development, :test do
  #省略
  gem 'rspec-rails', "~> 3.1.0"
  gem 'factory_girl_rails', "~> 4.4.1"
end
```

```sh
$ bundle install
```

> specディレクトリ直下に「factories」というディレクトリを作成。その中に、作成したインスタンスの複数形のファイル名でRubyのファイルを作成します。

*spec/factories/users.rb:*
```ruby
FactoryGirl.define do

  factory :user do
    nickname              "abe"
    email                 "kkk@gmail.com"
    password              "00000000"
    password_confirmation "00000000"
  end

end
```
これで準備は完了です。このようにすると、specファイルの中で特定のメソッドにより簡単にインスタンスを生成したり、DBに保存したりできるようになります。

* **buildメソッド**

引数にシンボル型で取ったクラス名のインスタンスを、factory_girlの記述をもとに作成します。例えば前述のusers.rbが存在する場合、下記2つの変数userの値は同じ値になります。

*factory_girlによるインスタンスの生成:*
```ruby
#factory_girlを利用しない場合
user = User.new(nickname: "abe", email: "kkk@gmail.com", password: "00000000", password_confirmation: "00000000")
#factory_girlを利用する場合
user = FactoryGirl.build(:user)
```

* **createメソッド**

buildとほぼ同じ働きをしますが、createの場合はテスト用のDBに値が保存されます。

*factory_girlによるインスタンスの生成:*
```ruby
#createしたインスタンスはDBに保存される
user = FactoryGirl.create(:user)
```


### factory_girlの記法の省略
factory_girlによってインスタンスを作成する際に、レシーバーであるクラスのFactoryGirlという記述を省略することができます。そのためには、spec/rails_helper.rbを以下のように編集します。

*spec/rails_helper.rb:*
```ruby
#省略
RSpec.configure do |config|
  #下記の記述を追加
  config.include FactoryGirl::Syntax::Methods

  #省略

end
```
すると、先ほどのuser_spec.rbの記述はFactoryGirlを省いて以下のように省略できます。

*user_spec.rb:*
```ruby
  #nicknameが空では登録できないこと
  it "is invalid without a nickname" do
    user = build(:user, nickname: "")
    user.valid?
    expect(user.errors[:nickname]).to include("can't be blank")
  end
```


###セットした値の上書き
factoriesディレクトリ内のファイルで予めセットした値を変更しインスタンスを生成したい場合は、specファイル側で引数を増やし、上書きすることができます。
引数はカラム名: 値という形のハッシュで、いくつでも追加することができます。

*セットした値を変更する:*
```sh
#デフォルトの場合
user = build(:user)
=><User:0x007fcabab94650
 id: nil,
#中略
nickname: "abe">
user = build(:user, nickname: "shinbo")
=><User:0x007fcac2a88998
 id: nil,
#中略
nickname: "shinbo">
```



<a name="model2_rule"></a>
## テストコードを書く際の原則について学ぼう

### テストコードを書く際の原則

テストコードを書くにあたっては、守るべき以下の原則があります。

* ①各exampleで期待する値は1つ

* ②期待する結果をはっきりわかりやすく記述

* ③起きて欲しいことと起きてほしくないこと両方をテストする

* ④境界値をテストする

* ⑤可読性を考えつつ、適度にDRYにする

### ①各exampleで期待する値は1つ

テストコードにおいては、example(it "hoge" do ~ end のまとまり)ひとつに必ずエクスペクテーション(expext(◯◯).to ~)をひとつ含めます。
２つ以上含めてしまうと、どちらのエクスペクテーションでエラーが出たのか判別できず、正確なテストができないためです。

### ②期待する結果をはっきりわかりやすく記述する

it "〜" doの"〜"の部分は、期待する結果を書いておく場所です。
明快な書き方をすることで、自身の確認やチームメンバーとの共有、顧客への仕様説明が楽になり、コミュニケーションミスも減ります。

### ③起きて欲しいことと起きてほしくないこと両方をテストする

起きて欲しいことをチェックしたら、起きてほしくない場合にどんな結果が起こるかも想定しその通りになるか確かめましょう。
予期せぬ動作が残るのを防ぐためです。

### ④境界値をテストする

6文字以上でバリデーションに引っかかる、という条件の場合は「5文字までは正常」と「6文字以上ならば異常」を確かめるようにします。こちらも、予期せぬ動作を防ぐためです。

### ⑤可読性を考えつつ、適度にDRYにする

DRYとは「Don't Repeat Yourself」の略で、何度も同じことを記述せず効率的にコードを書こう、という原則を意味します。しかし、テストコードにおいては何よりもわかりやすさを優先しましょう。その結果たとえDRYに添えなくなったとしても、わかりづらくなってテストの見落としが起きるよりはましだからです。


<a name="model2_all"></a>
## 全ての条件を網羅したバリデーションテストを書こう

テストコードの原則に沿って、Pictweetのユーザー新規登録時のバリデーションに関するテストコードを完成させましょう。

### テストすべき項目一覧

今回、ユーザーの登録時に確認が必要なバリデーションのテストは以下です。

* nicknameとemail、passwordとpassword_confirmationが存在すれば登録できること

    まずは全ての条件が整っている場合に「登録ができること」を確かめるパターンです。この場合は、「正常に保存されることを期待する」エクスペクテーションが必要です。この時利用するマッチャが`be_valid`マッチャです。

* nicknameが空では登録できないこと
* emailが空では登録できないこと
* passwordが空では登録できないこと
* passwordが存在してもpassword_confirmationが空では登録できないこと
* nicknameが7文字以上であれば登録できないこと
* nicknameが6文字以下では登録できること
* 重複したemailが存在する場合登録できないこと

    先にユーザーを１人登録しておき、その後emailに同じ値を持つ別のユーザーが登録できるかチェックすることで確かめられます。
    この時含まれるエラー文は、「has already been taken」です。

* passwordが8文字以上であれば登録できること
* passwordが7文字以下であれば登録できないこと


*user_spec.rb:*
```ruby
require 'rails_helper'

describe User do
  describe '#create' do
    it "nicknameとemail、passwordとpassword_confirmationが存在すれば登録できること" do
      user = build(:user)
      expect(user).to be_valid
    end

    it "nicknameが空では登録できないこと" do
      user = build(:user, nickname: "")
      user.valid?
      expect(user.errors[:nickname]).to include("can't be blank")
    end

    it "emailが空では登録できないこと" do
      user = build(:user, email: "")
      user.valid?
      expect(user.errors[:email]).to include("can't be blank")
    end

    it "passwordが空では登録できないこと" do
      user = build(:user, password: "")
      user.valid?
      expect(user.errors[:password]).to include("can't be blank")
    end

    it "passwordが存在してもpassword_confirmationが空では登録できないこと" do
      user = build(:user, password_confirmation: "")
      user.valid?
      expect(user.errors[:password_confirmation]).to include("doesn't match Password")
    end

    it "nicknameが7文字以上であれば登録できないこと" do
      user = build(:user, nickname: "aaaaaaaa")
      user.valid?
      expect(user.errors[:nickname][0]).to include("is too long")
    end

    it "nicknameが6文字以下では登録できること" do
      user = build(:user, nickname: "byam")
      expect(user).to be_valid
    end

    it "重複したemailが存在する場合登録できないこと" do
      user = create(:user)
      next_user = build(:user, email: user.email)
      next_user.valid?
      expect(next_user.errors[:email]).to include("has already been taken")
    end

    it "passwordが8文字以上であれば登録できること" do
      user = build(:user, password: "000000000", password_confirmation: "000000000")
      expect(user).to be_valid
    end

    it "passwordが7文字以下であれば登録できないこと" do
      user = build(:user, password: "0000000", password_confirmation: "0000000")
      user.valid?
      expect(user.errors[:password][0]).to include("is too short")
    end

  end
end
```





<a name="controller"></a>
# 4章「単体テスト・コントローラー編」

Pictweetのtweets_controller.rbのテストコードを作成していきます。
コントローラーのテストでは主に「アクション内で定義するインスタンス変数の値が期待したものになるか」「アクションが呼ばれたあと、期待したビューが表示されるか」の2点を確かめます。
そのためには擬似的なリクエストをする処理や、インスタンス変数の値を確かめるためのエクスペクテーションの記法を知る必要があります。


<a name="controller_test"></a>
## コントローラーのテストを書く

コントローラーのテストとは、コントローラー内のメソッドであるアクションが呼ばれた際の挙動をチェックするものになります。
1つのアクションにつき、以下の2点を確かめます。

1. アクション内で定義されているインスタンス変数の値が期待したものになるか
2. アクションの持つビューに正しく遷移するか

つまり、ひとつのアクションに対して2つ以上のexample(`it '' do ~ end`)が必要です。基本的には以下のような流れでコードを書きます。

*コントローラーのテストの流れ:*
```ruby
describe ◯◯Controller do
  describe 'HTTPメソッド名 #アクション名' do
    it "インスタンス変数は期待した値になるか？" do
    "擬似的にリクエストを行ったことにするコードを書く"
      "エクスペクテーションを書く"
    end

    it "期待するビューに遷移するか？" do
      "擬似的にリクエストを行ったことにするコードを書く"
      "エクスペクテーションを書く"
    end
  end
```


各アクションはそれぞれリクエストされる際のhttpメソッドが違いますが、それぞれ少しずつテストの書き方が異なります。ここでは、Railsに定められている7つのアクションのうちhttpメソッドがgetであるアクションに関してのテストコードの書き方を学びましょう。

### 事前準備

> Pictweetの元のコードを編集

各アクションが呼ばれる際にbefore_actionで発動する「ログインしていなかった場合にリダイレクトするメソッド」が呼ばれないよう、before_actionの行をコメントアウトしておきましょう。

*app/controllers/tweets_controller.rb:*
```ruby
#3行目付近の以下のような行をコメントアウト
  # before_action :move_to_index, except: [:index]
```


> Pictweetのディレクトリに、spec/controllers/を作成

`spec/controllers`の直下に`tweets_controller.rb`のテストコードを書いていくファイル`tweets_controller_spec.rb`を作成しましょう。

*tweets_controller_spec.rb:*
```ruby
require 'rails_helper'

describe TweetsController do

end
```

> コードが正常に動作するか確認
```sh
$ bundle exec rspec spec/controllers/tweets_controller_spec.rb

No examples found.

Finished in 0.00038 seconds (files took 3.23 seconds to load)
0 examples, 0 failures
```


### httpメソッドがgetで呼ばれるアクションのテストコードを書こう
7つのアクションの中でも比較的簡単にテストコードを書くことができる「httpメソッドがget」であるアクションのテストコードを書いていきましょう。
これは「index, new, edit, show」の4種類がありますが、Pictweetにおいてはnewアクションが最も単純なアクションです。
中身が何もないため、テストすべきことは「newアクションが動いたあとnew.html.erbに遷移するか」のみです。そこで、今回はまずnewアクションのテストコードから記述します。

### 1.newアクションのテストコード
> newアクション用のテストコードのグループを作成

*tweets_controller_spec.rb:*
```ruby
require 'rails_helper'

describe TweetsController do
  describe 'GET #new' do
    it "renders the :new template" do
    end
  end

end
```
コントローラーのアクションもメソッドなので、名前の頭に#をつけるのは変わりません。違うのは、その前にhttpメソッド名を大文字で書き加えている点です。

また、it と do の間のメッセージは、今回テストしたい内容を書いています。

こちらのグループの中身に、以下のような流れでテストコードを書きます。

* まず、擬似的にnewアクションを動かすリクエストを行うコードを書く
* 次に、new.html.erbに遷移することを確かめるコードを書く


**getメソッド**

各httpメソッドには、それぞれ対応するメソッド（get, post, delete, patch）が存在します。引数として、利用したいコントローラーのアクションをシンボル型で渡します。必要なパラメーターが存在する場合は、各パラメーターをハッシュ形式で渡します。

> 擬似的にnewアクションを動かすリクエストを行うコードを書く

*tweets_controller_spec.rb:*
```ruby
require 'rails_helper'

describe TweetsController do

  describe 'GET #new' do
    it "renders the :new template" do
      get :new

    end
  end

end
```


> new.html.erbに遷移することを確かめるコードを書く

*tweets_controller_spec.rb:*
```ruby
require 'rails_helper'

describe TweetsController do

  describe 'GET #new' do
    it "renders the :new template" do
      get :new
      expect(response).to render_template :new
    end
  end
end
```


**response**

example内でリクエストが行われた後の遷移先のビューの情報を持つインスタンスです。

**render_templateマッチャ**

引数にシンボル型でアクション名を取ります。引数で指定したアクションがリクエストされた時に自動的に遷移するビューを返します。

> newアクションのテストコードをチェック
```sh
$ bundle exec rspec spec/controllers/tweets_controller_spec.rb

TweetsController
  GET #new
    renders the :new template

Finished in 0.03284 seconds (files took 3.18 seconds to load)
1 example, 0 failures
```


### 2.editアクションのテストコード

> tweets_controller_spec.rb
```ruby
#省略
  describe 'GET #edit' do
    it "assigns the requested contact to @tweet" do
    end

    it "renders the :edit template" do
    end
  end
#省略
```

あらかじめ、2つのexampleを作成しました。まずは、上の方の「インスタンス変数の値を確かめる」テストコードを書きます。

さて、editアクションが何をしているのかを考えると、まずはtweetsテーブルにレコードが入っていなければいけません。そこで、このexampleの中でtweetsテーブルにレコードを保存します。そのためには、前章で学習したfactory_girlを利用します。

> exampleの中でtweetsテーブルにレコードを保存

*spec/factories/tweets.rb:*
```ruby
FactoryGirl.define do
  factory :tweet do
    text "hello!"
    image "hoge.png"
    user_id 1
  end
end
```

> tweets_controller_spec.rb
```ruby
#省略
  describe 'GET #edit' do
    it "assigns the requested contact to @tweet" do
      tweet = create(:tweet)
      get :edit, id: tweet
    end

    it "renders the :edit template" do
    end
  end
#省略
```

**assignsメソッド**

コントローラーのテスト時、アクションで定義しているインスタンス変数をテストするためのメソッドです。
引数に、直前でリクエストしたアクション内で定義されているインスタンス変数をシンボル型で取ります。

> tweets_controller_spec.rb
```ruby
#省略
  describe 'GET #edit' do
    it "assigns the requested contact to @tweet" do
      tweet = create(:tweet)
      get :edit, id: tweet
      expect(assigns(:tweet)).to eq tweet
    end

    it "renders the :edit template" do
      tweet = create(tweet)
      get :edit, id: tweet
      expect(response).to render_template :edit
    end
  end
#省略
```


### indexアクションのテストコード
indexアクションに関してのポイントは、indexアクションで定義している@tweetsは配列の形で取得されてくるということです。

**create_list**

factory_girlの設定ファイルに存在しているリソースを複数作成したい場合に以下のように利用できます。

*create_listの例:*
```ruby
hoges = create_list(:hoge, 3)
```
第一引数に作成したいリソースをシンボル型で、第二引数に作成したい個数を数字で渡します。
上記の式では、hogeというリソースを3つ作成しレコードに保存しています。

** matchマッチャ**

引数に配列クラスのインスタンスをとり、expectの引数と比較するマッチャです。配列の中身の順番までチェックします。

**Faker**

emailや電話番号、名前などのダミーデータを作成するためのGemです。インストール後、factory_girlの設定ファイルの中でFakerのメソッドを利用し、ダミーデータを生成します。

> Gemfile:追加
```ruby
group :test do
  gem 'faker'
end
```

【例】Fakerダミーデータの生成方法
```sh
{ Faker::Internet.email }
=> "rodrick.wyman@rosenbaum.org"
```


> tweets.rb
```ruby
FactoryGirl.define do
  factory :tweet do
    text "hello!"
    image "hoge.png"
    user_id 1
    created_at { Faker::Time.between(2.days.ago, Time.now, :all) }
  end
end
```

> tweets_controller_spec.rb
```ruby
  describe 'GET #index' do
    it "populates an array of tweets ordered by created_at DESC" do
      tweets = create_list(:tweet, 3)
      get :index
      expect(assigns(:tweets)).to match(tweets.sort{|a, b| b.created_at <=> a.created_at })
    end

    it "renders the :index template" do
      get :index
      expect(response).to render_template :index
    end
  end
```



























