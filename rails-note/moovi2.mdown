* [準備](#preparation)
    * [データベースを削除](#preparation_db_delete)
    * [gitから新しくmoooviをクローンしよう](#preparation_git_clone)
    * [bundle installを実行しよう](#preparation_bundle_install)
    * [データベースを作成しよう](#preparation_db_create)
    * [サーバーを立ち上げられるようにしよう](#preparation_rails_server)
* [スクレイピング](#scraping)
    * [映画作品のモデルを作成しよう](#scraping_create_model)
    * [映画.comから映画情報をスクレイピングしよう](#scraping_eiga)
    * [重複した映画の情報はデータベースに保存できないようにしよう](#scraping_data_not_overlap)
    * [映画.comの上映中の映画すべてをスクレイピングしよう](#scraping_eiga_all)
* [基本機能](#basic_function)
    * [トップページを表示させよう](#basic_function_top_page)
    * [トップページに最新順で映画作品の一覧を表示しよう](#basic_function_top_page_newest)
    * [作品ページを表示しよう](#basic_function_product)
    * [検索画面を表示しよう](#basic_function_search_page)
    * [検索機能を実装しよう](#basic_function_search_function)
    * [レビューのモデルを作成しよう](#basic_function_review_model)
    * [投稿画面を表示させよう](#basic_function_review_page)
    * [映画作品へのレビューの一覧を作品ページで見れるようにしよう](#basic_function_review_page_shows)
* [応用機能](#application)
    * [レビューの評価を星で表示する](#application_review_star)
    * [投稿数ランキングの表示](#application_ranking)
    * [ユーザー登録機能](#application_user_register)
    * [サインアウト、ログイン機能](#application_user_signin_out)
    * [アイコン画像のアップロード機能](#application_avatar)
    * [サインアップ画面でニックネームと画像を設定](#application_nickname_avatar_view)
    * [マイページ](#application_mypage)

<a name="preparation"></a>
## 準備

<a name="preparation_db_delete"></a>
### データベースを削除
* **rake db:drop**

`rake db:drop`コマンドはそのディレクトリのアプリケーションのデータベースを削除するコマンドです。rake db:createコマンドの反対のコマンドになります。

* **rake db:migrate:reset**

`rake db:migrate:reset`コマンドは、rake db:drop, rake db:create, rake db:migrateを一度に行なってくれる便利なコマンドです。

例えば、一度誤ったmigrationファイルを実行してしまったり、レコードをすべて削除しやり直したいときなどに利用します。

今回は、もう一度最初からmoooviを作り直していくのでターミナルでmoooviディレクトリに移動して、以下のコマンドを打ち込みデータベースを削除しましょう。

```sh
$ bundle exec rake db:drop
```

<a name="preparation_git_clone"></a>
### gitから新しくmoooviをクローンしよう
今回クローンするフォルダは前回moooviをクローンしたときと違って以下の点が異なります。

* コントローラにはメソッドが何も書いていない
* routes.rbにルーティングが何も書いていない
* ビューに元から書いてあったerbのソースコードが書いていない
* モデルは何も生成していない

```sh
$ git clone -b rails2-5 https://github.com/we-b/mooovi.git mooovi2
```

<a name="preparation_bundle_install"></a>
### bundle installを実行しよう
railsアプリケーションを使用するためには、まずそのアプリケーションが指定するgemをインストールする必要がありました。

```sh
$ bundle install
```

<a name="preparation_db_create"></a>
### データベースを作成しよう
データベースは`config>database.yml`に基づいて作成されます。

```sh
$ bundle exec rake db:create
```

<a name="preparation_rails_server"></a>
### サーバーを立ち上げられるようにしよう
サーバーを立ち上げるには、データベースを用意しておく必要があります。
```sh
$ bundle exec rails s
```

[http://localhost:3000](http://localhost:3000) を確認する。



<a name="scraping"></a>
## スクレイピング

<a name="scraping_create_model"></a>
### 映画作品のモデルを作成しよう
まずは映画作品をデータベースに保存するために映画作品用のテーブルProductsテーブルを作成しましょう。

カラム名 |   型  | 情報
- | - | -
title  | string | 作品名
image_url  | text |   作品画像のURL
director   | string | 監督名
detail | text  |  あらすじ
open_date  | string | 公開日

* テーブルを生成するコマンドは`rails g model モデル名(単数形)`です
```sh
$ bundle exec rails g model product
      invoke  active_record
      create    db/migrate/20151117050631_create_products.rb
      create    app/models/product.rb
      invoke    test_unit
      create      test/models/product_test.rb
   identical      test/fixtures/products.yml
```

* カラムの情報を追加するには`マイグレーションファイル`を編集する必要があります

*db/migrate/20151117050631_create_products.rb*:
```ruby
class CreateProducts < ActiveRecord::Migration
  def change
    create_table :products do |t|
      t.string :title
      t.text :image_url
      t.string :director
      t.text :detail
      t.string :open_date
      t.timestamps
    end
  end
end
```

* マイグレーションの実行は`bundle exec rake db:migrate`です
```sh
$ bundle exec rake db:migrate
== 20151117050631 CreateProducts: migrating ===================================
-- create_table(:products)
   -> 0.0276s
== 20151117050631 CreateProducts: migrated (0.0277s) ==========================
```


<a name="scraping_eiga"></a>
### 映画.comから映画情報をスクレイピングしよう
* スクレイピング用のgemをインストールする

*Gemfile*:
```ruby
# 省略、最後に追加する

# スクレイピングをする
gem 'mechanize'
```

gemをインストールする
```sh
$ bundle install
```
* スクレイピングで映画.comの[上映中の映画](http://eiga.com/now/)の1ページ目から映画情報を20件取得する

*scraping.py*
```ruby
class Scraping
  def self.movie_urls
    agent = Mechanize.new
    links = []
    next_url= "/now/"

    current_page = agent.get("http://eiga.com" + next_url)
    elements = current_page.search('.m_unit h3 a')
    elements.each do |ele|
      links << ele.get_attribute('href')
    end


    links.each do |link|
      get_product('http://eiga.com' + link)
    end
  end

  def self.get_product(link)
    agent = Mechanize.new
    page = agent.get(link)
    title = page.at('.moveInfoBox h1').inner_text
    image_url = page.at('.pictBox img')[:src] if page.at('.pictBox img')
    director = page.at('.f span').inner_text if page.at('.f span')
    detail = page.at('.outline p').inner_text
    open_date = page.at('.opn_date strong').inner_text if page.at('.opn_date strong')
    puts "#{title}, #{image_url}, #{director}, #{detail}, #{open_date}"
  end
end
```

* 取得した映画情報をProductsテーブルに保存する

*scraping.rb*
```ruby
    # 省略
    product = Product.new(
      title: title, image_url: image_url, director: director,
      detail: detail, open_date:open_date)
    product.save
    # 省略
```


<a name="scraping_data_not_overlap"></a>
### 重複した映画の情報はデータベースに保存できないようにしよう

すでに保存されている映画の情報はデータベースに保存されないようにしましょう。

* 一度データベースに保存した映画の情報は保存できないようにする

*scraping.rb*
```ruby
    # 省略

    product = Product.where(
      title: title, image_url: image_url, director: director,
      detail: detail, open_date:open_date).first_or_initialize
    product.save

    # 省略
```

<a name="scraping_eiga_all"></a>
### 映画.comの上映中の映画すべてをスクレイピングしよう

* [映画.com(上映中の映画)](http://eiga.com/now/)のすべてのページにある映画を取得する

*scraping.rb*
```ruby
class Scraping
  def self.movie_urls
    agent = Mechanize.new
    links = []
    next_url= "/now/"

    while true
      current_page = agent.get("http://eiga.com" + next_url)
      elements = current_page.search('.m_unit h3 a')
      elements.each do |ele|
        links << ele.get_attribute('href')
      end

      next_link = current_page.at('.next_page')
      next_url = next_link.get_attribute('href')

      break unless next_url
    end
    links.each do |link|
      get_product('http://eiga.com' + link)
    end
  end

  def self.get_product(link)
    agent = Mechanize.new
    page = agent.get(link)
    title = page.at('.moveInfoBox h1').inner_text
    image_url = page.at('.pictBox img')[:src] if page.at('.pictBox img')
    director = page.at('.f span').inner_text if page.at('.f span')
    detail = page.at('.outline p').inner_text
    open_date = page.at('.opn_date strong').inner_text if page.at('.opn_date strong')
    product = Product.where(
      title: title, image_url: image_url, director: director,
      detail: detail, open_date:open_date).first_or_initialize
    product.save
  end
end
```



<a name="basic_function"></a>
## 基本機能

レビューの投稿をして、それが見れるという基本的な機能を実装しましょう。

<a name="basic_function_top_page"></a>
### トップページを表示させよう

rootパス(http://[localhost:3000](http://localhost:3000))にアクセスしたときにmoooviのトップページが表示されるようにしましょう

* rootパスにアクセスしたときのコントローラとアクションを`routes.rb`で設定しましょう

*routes.rb*
```ruby
TechReviewSite::Application.routes.draw do
    root 'products#index'
end
```

routes:
```sh
$ rake routes
Prefix Verb URI Pattern Controller#Action
  root GET  /           products#index
```

* productsコントローラーのindexアクションを設定します

*products_controller.rb*
```ruby
class ProductsController < RankingController
    def index
    end
end
```



<a name="basic_function_top_page_newest"></a>
### トップページに最新順で映画作品の一覧を表示しよう

* productsコントローラーのindexアクションでインスタンス変数に作品情報を２０件分取得して代入しましょう

*products_controller.rb*
```ruby
    # 省略

    def index
        @products = Product.order('id asc').limit(20)
    end

    # 省略
```

* ビューでアクションで取得したインスタンス変数にeachメソッドを使用して全ての作品を表示しましょう

*views/products/index.html.erb*
```html

    <!-- # 省略 -->

                <% @products.each do |product| %>
                  <li class="col">
                    <a href="#"><div class="thumbnail__figure" style="background-image:url(<%= product.image_url %>)"></div></a>
                    <div class="thumbnail__caption">
                      <h3 class="text-xsmall text-overflow" title="<%= product.title %>">
                        <span><i class="icon-rate-60 text-xxsmall opacity-60" title=""></i></span><%= product.title %></h3>
                      <p class="text-small">
                        <span class="rating-star">
                          <i class="star-actived rate-[ここに評価を表示]0"></i>
                        </span>
                      </p>
                    </div>
                  </li>
                <% end %>

    <!-- # 省略 -->
```


<a name="basic_function_product"></a>
### 作品ページを表示しよう

次に作品ページに移動できるようにします。

* productsコントローラーのshowアクションにアクセスするためのルーティングを設定しましょう
*routes.rb*
```ruby
    # 省略

    get 'products/:id' => 'products#show' # 作品ページ

    # 省略
```

* クリックしたときのリンク先を修正するにはaタグのhref属性の値を変更します

*views/products/index.html.erb*
```html

    <!-- # 省略 -->
            <a href="/products/<%= product.id %>">
    <!-- # 省略 -->
```



* productsテーブルからidカラムがリンクに含まれる作品のidである作品をfindメソッドとparams[:id]を使って取得しインスタンス変数に代入しましょう

*products_controller.rb*
```ruby
    # 省略

    def show
        @product = Product.find(params[:id])
    end

    # 省略
```

* ビューファイルを編集する

*views/products/show.html.erb*
```html
    <!-- # 省略 -->

<header class="header header--section">
    <%= @product.title %>
</header>
<p style="text-align: center">
    <img src="<%= @product.image_url %>" alt="<%= @product.title %>">
</p>

    <!-- # 省略 -->
```


<a name="basic_function_search_page"></a>
### 検索画面を表示しよう

「投稿するボタン」をクリックしたら検索画面に遷移するようにする

*routes.rb*
```ruby
    root 'products#index'
    get 'products/search' => 'products#search' # 検索
    get 'products/:id' => 'products#show' # 作品ページ
```


*products_controller.rb*
```ruby
    # 省略

    def search

    end

    # 省略
```


<a name="basic_function_search_function"></a>
### 検索機能を実装しよう

#### LIKE句
LIKE句は、あいまいな文字列の検索をすることができるもので、whereメソッドと一緒に使います。

あいまいな文字列の検索とはどういうことか。
例えば、1文字目に'a'という文字列が入ったデータや最後の文字に'b'が入っているデータ、文字列の途中に'c'が入ったデータなどを検索したい時に、あいまい文字列というものを使って検索することです。

* **あいまい文字列について**

文字列 |意味
- | -
%  | 任意の文字列(空白文字列含む)
_  | 任意の1文字


* **実行サンプル**

実行例 | 詳細
- | |
where('title LIKE(?)', "a%")  |  aから始まるタイトル
where('title LIKE(?)', "%b")  |  bで終わるタイトル
where('title LIKE(?)', "%c%") |  cが含まれるタイトル
where('title LIKE(?)', "d_")  |  dで始まる2文字のタイトル
where('title LIKE(?)', "_e")  |  eで終わる2文字のタイトル


* **keywordというキーで、バックエンドに検索キーワードが送られています
あいまい検索はLike句を使います**

*products_controller.rb*
```ruby
    # 省略

    def search
        @products = Product.where('title LIKE(?)', "%#{params[:keyword]}%").limit(20)
    end

    # 省略
```


* **検索結果を表示するためにビューを編集しましょう**

*views/products/search.html.erb*
```html
    <!-- # 省略 -->
                <% @products.each do |product| %>
                  <li>
                    <a class="listview__element--right-icon" href="/products/0/reviews/new" title="<%= product.title %>">
                      <div class="position-right p1em">
                        <i class="icon-chevron-right color-sub"></i>
                      </div>
                      <div class="row no-space-bottom">
                        <div class="col2">
                          <div class="thumbnail thumbnail--movies">
                            <div class="thumbnail__figure" style="background-image: url(<%= product.image_url %>);" title="<%= product.title %>"></div>
                          </div>
                        </div>
                        <div class="col6 push6">
                          <h3 class="text-middle text-break">
                            <span class="color-sub"><%= product.title %></span>
                          </h3>
                          <p class="text-xsmall text-overflow">
                          </p>
                        </div>
                      </div>
                    </a>
                  </li>
                <% end %>
    <!-- # 省略 -->
```

<a name="basic_function_review_model"></a>
### レビューのモデルを作成しよう
レビューを投稿画面を作る前に、レビューをデータベースに保存するためにレビュー用のテーブルReviewsテーブルを作成しましょう。
以下のカラムの構成でReviewsテーブルを作成してください。


カラム名  |  型  | 情報
- | - | -
nickname |   String | ニックネーム
rate   | Integer| 評価
review  |Text  |  レビュー
product_id | Integer |作品id

* `rails g モデル名(小文字)`でマイグレーションファイルを作成します

```sh
$ bundle exec rails g model review
```

* マイグレーションファイルにカラムの情報を記述します

*db/migrate/20151117081150_create_reviews.rb*
```ruby
class CreateReviews < ActiveRecord::Migration
  def change
    create_table :reviews do |t|
      t.string :nickname
      t.integer :rate
      t.text :review
      t.integer :product_id
      t.timestamps
    end
  end
end

```

* `bundle exec rake db:migrate`コマンドでマイグレーションを実行します

```sh
$ bundle exec rake db:migrate
== 20151117081150 CreateReviews: migrating ====================================
-- create_table(:reviews)
   -> 0.0634s
== 20151117081150 CreateReviews: migrated (0.0637s) ===========================
```


<a name="basic_function_review_page"></a>
### 投稿画面を表示させよう

#### resourcesメソッド
resourcesメソッドに対象となるリソース名(コントローラー名)を指定するだけで、Railsのリソースの7つのアクションで記載した7つのアクション名に対してのルーティングが自動的に設定されます。

Railsのリソースの7つのアクション | 役割
- | -
index |  リソースの一覧を表示する。
show   | リソースの内容を表示する。
new |リソースを追加する。
create | リソースを追加し、作成する。
edit   | リソースを更新するためのフォームを表示する。
update | リソースを更新する。
destroy |リソースを削除する。

* **resourcesメソッドのネスト**

resourcesメソッドのネストは以下のように書きます。

【例】config/routes.rb
```ruby
resources :books do
  resources :reviews
end
```

`collection` というのは、Rails7つのアクション以外のアクション名を定義する時に使います。

*routes.rb*
```ruby
TechReviewSite::Application.routes.draw do

    resources :products, only: :show do
        resources :reviews, only: [:new, :create]
        collection do
            get 'search'
        end
    end
    root 'products#index'
end
```

```sh
$ rake routes
            Prefix Verb URI Pattern                                 Controller#Action
   product_reviews POST /products/:product_id/reviews(.:format)     reviews#create
new_product_review GET  /products/:product_id/reviews/new(.:format) reviews#new
   search_products GET  /products/search(.:format)                  products#search
           product GET  /products/:id(.:format)                     products#show
              root GET  /                                           products#index
```

これでどのproductに対するreviewなのかということがパスから判断できるようになりました

#### form_for

* form_forは、特定のモデルを編集・追加するためのフォームを生成するヘルパーメソッドです。

特定のテーブルにレコードだけを新規作成、更新するときに利用します。

```html
<%= form_for(モデルクラスのインスタンス) do |f| %>
…
<% end %>
```

このようにあるモデルのインスタンスをform_forの引数にします。
form_forは引数のインスタンスが何も情報を持っていなければ自動的にcreateアクションへ、すでに情報を持っている場合はupdateアクションへ自動的に振り分けてくれます。

form_tagでは送信先のurlを直接引数に定義していました。

*search.html.erb*
```html
<%= form_tag('/products/search', method: :get) do %>
```

* form_for内で使うメソッドは、`f.htmlタグ名 :カラム名`の形で指定します。

例えば、以下のヘルパーメソッドを見てください。
```html
<%= f.text_field :name %>
```
こちらは、次のようなhtmlに変換されます。
```html
<input id="モデル名_name" name="モデル名[name]" type="text" size="モデルで設定したsize">
```

form_for内におけるメソッドはformに使用するhtmlタグの数だけあります。

メソッド  |  用途
- | -
f.label |labelのlabelタグを表示
f.text_field  |  textのinputタグを表示
f.date_select  | モデルで設定したフィールドをselectタグで選べるようにして表示
f.check_box |checkboxのinputタグを表示
f.number_field | numberのinputタグを表示
f.submit  |  submitのinputタグを表示

基本的にhtmlのformを知っていたら推測できるようなメソッドが用意されています。ここで全てのメソッドを覚えるのは大変なので、必要なときに[railsの公式ドキュメント](http://railsdoc.com/form)を確認してください。

#### form_forとform_tag
`form_for` と `form_tag` どちらを使うべきかは、基本的にモデルの有無で判断します。入力フォームで入力するデータのモデルがあれば `form_for` を使い、入力するデータが特にモデルを持っていなければ `form_tag` を使います。

* `form_for`: モデルがあるデータを扱うときに使う。(投稿フォームなど)
* `form_tag`: 単にデータを特定のアクションに送りたい時に使う。（検索フォームなど）

#### コントローラ

*reviews_controller.rb*
```ruby
class ReviewsController < RankingController
    def new
        @product = Product.find(params[:product_id])
        @review = Review.new
    end

  def create
    Review.create(create_params)
    redirect_to controller: :products, action: :index
  end

  private
  def create_params
    params.require(:review).permit(:nickname, :rate, :review).merge(product_id: params[:product_id])
  end
end

```


<a name="basic_function_review_page_shows"></a>
### 映画作品へのレビューの一覧を作品ページで見れるようにしよう

* ProductモデルとReviewモデルとの間にアソシエーションを設定する

*model/review.rb*
```ruby
class Review < ActiveRecord::Base
    belongs_to :product
end
```

*model/product.rb*
```ruby
class Product < ActiveRecord::Base
    has_many :reviews
end
```



<a name="application"></a>
# 応用機能

<a name="application_review_star"></a>
## レビューの評価を星で表示する

* **個別の作品ページでレビューの星を表示する**

*show.html.erb*
```html
<!-- 省略 -->

  <p class="text-small">
    <span class="rating-star">
      <i class="star-actived rate-90"></i>
    </span>
  </p>

<!-- 省略 -->
```

* ** 映画一覧ページでそれぞれの映画の平均評価を取得する **

*index.html.erb*
```html
    <p class="text-small">
      <% if product.reviews.present? %>
      <span class="rating-star">
        <i class="star-actived rate-<%= product.reviews.average(:rate).round %>0"></i>
      </span>
      <% else %>
      <span class="rating-star">
        <i class="star-actived rate-0"></i>
      </span>
      <% end %>
    </p>
```


<a name="application_ranking"></a>
## 投稿数ランキングの表示

ランキングの条件は「投稿数の多いものから順番に」と「上から5件取得」の2つです。ランキングが表示されるのはすべての画面です。つまり、すべてのコントローラーのアクションでランキングの情報を取得しなければなりません。
こういった場合、ランキングを取得する処理をbefore_actionで記述しましょう。
####1.before_actionを設定する
あるコントローラのすべてのアクションで実行の前に共通の処理を行いたいときがあります。before_actionを使用すると全てのアクションが実行される前に指定したメソッドを呼び出すことができるようになります。

```ruby
  class コントローラ名 < ApplicationController
    before_action :処理させたいメソッドの名前
```

① before_actionを書いたコントローラのすべてのアクションの前に処理を行える
② before_actionを書いたコントローラで共通の処理を行える

すべてのコントローラで共通のbefore_actionを定義したい場合は**ApplicationController**に記述します。

*controller/ranking_controller.rb*
```ruby
class RankingController < ApplicationController
  layout 'review_site'
  before_action :ranking
  def ranking
    @ranking = Product.limit(5)
  end
end

```

####2.ランキングを表示させる

上記の`layout 'review_site'`という記述がありますね。これはビューのレイアウトファイルを指定するものです。なにも指定しないとレイアウトファイルはapplication.html.erbとなります。

* **レイアウトファイル**

レイアウトファイルとは**app/views/layouts/**の下に入っているHTMLファイルです。レイアウトファイルはURLにアクセスして対応するコントローラが呼ばれたあと、最初に表示されるHTMLのことです。実は今まで修正していた**show.html.erb**などのファイルはレイアウトファイルの中に呼び出されています。

*/layouts/review_site.html.erb*
```html

<!-- 省略 -->

    <% @ranking.each.with_index(1) do |product, i| %>

    <!-- 省略 -->

    <% end %>

<!-- 省略 -->


```


##### 要点チェック

* レイアウトファイルはURLにアクセスしたときに最初に呼ばれるHTMLファイル
* コントローラ内でlayout レイアウトファイル名と指定すると、コントローラごとに使うレイアウトファイルを指定できる
* コントローラで指定しないときに呼ばれるデフォルトのレイアウトファイルはapplication.html.erb



####3.productsテーブルから、レビュー数が多い順に5件レコードを取得する

* **groupメソッド**

groupメソッドはテーブルのレコードを**指定したカラム**でまとめることができます。以下のように使います。
```ruby
モデル.group(:カラム名)
```

groupメソッドを使うと、指定したカラムでレコードがまとめられます。まとめられたレコードの内、idが一番小さいレコードの１件だけが表示されていますが、プログラムが実行されている裏側ではすべてのレコードが指定したカラムでまとめられています。現在は、それぞれのまとまりが具体的に何個あるのかはわかりません。

* **countメソッド**

countメソッドは配列などの要素数を返すメソッドです。groupメソッドに続けて使うとまとめられたそれぞれのレコードの数が取得できます。

```ruby
モデル.group(:カラム名).count
```

例：
```ruby
pry(main)> Review.group(:product_id).count
   (0.4ms)  SELECT COUNT(*) AS count_all, product_id AS product_id FROM `reviews` GROUP BY product_id
=> {1=>3, 2=>1, 3=>1, 229=>1}
```

* **order('count_カラム名').count(カラム名)**

countメソッドの引数にカラム名を指定することができます。するとorderメソッドでcount_カラム名でのソートが可能となります。これはそのカラムを持つレコードの数でソートするという意味です。

つまり上の例では、product_idでまとめたレコードをレコード数でソートして、カラム名とレコード数のハッシュで返す、という処理になっています。
ソートする
```ruby
pry(main)> Review.group(:product_id).order('count_product_id DESC').count(:product_id)
   (0.4ms)  SELECT COUNT(`reviews`.`product_id`) AS count_product_id, product_id AS product_id FROM `reviews` GROUP BY product_id ORDER BY count_product_id DESC
=> {1=>3, 229=>1, 2=>1, 3=>1}
```

取得したいのは5件なので、limit(5)を付け加えます。limitメソッドは複数のレコードの配列のような形であるActiveRecord::Relationに対するメソッドです。count(:product_id)の時点ではハッシュになっているため、その後に付け加えるとハッシュに対してlimitメソッドを実行することになりエラーが起こります。そのため、その直前に付け加え、以下のようにします。

```ruby
Review.group(:product_id).order('count_product_id DESC').limit(5).count(:product_id)
```


* **keysメソッド**

ハッシュはkeysというメソッドを持っています。これはハッシュのキーだけを取り出して配列として返すメソッドです。

```ruby
Review.group(:product_id).order('count_product_id DESC').limit(5).count(:product_id).keys
   (0.5ms)  SELECT COUNT(`reviews`.`product_id`) AS count_product_id, product_id AS product_id FROM `reviews` GROUP BY product_id ORDER BY count_product_id DESC LIMIT 5
=> [1, 229, 2, 3]
```


* **mapメソッド**

mapメソッドは配列オブジェクトのインスタンスメソッドです。mapオブジェクトは配列の中身を１つずつ取り出してブロックという構文を繰り返し実行します。そして、ブロックの返り値を集めた新しい配列を作成します。

```ruby
配列オブジェクト.map {|ele| ブロックの処理}
# eleには配列の要素が１つずつ代入される
# ブロックの処理は配列の要素の数だけ繰り返し実行される
```

具体的な例を見ていきましょう。
配列に入っている全ての数値を2乗した新しい配列を取得したい場合、mapを使うと以下のように書けます。

【例】

```ruby
numbers = [2, 5, 9]
squares = numbers.map {|number| number * number}
p squares
=> [4, 25, 81]
```

mapメソッドを使うと配列オブジェクトの各要素を使って新しい配列を生成することができます。product_idの配列に対してmapメソッドを使い、Productsテーブルからレコードを取得するのは以下のような方法になります。

*ranking_controller.rb*
```ruby
class RankingController < ApplicationController
  layout 'review_site'
  before_action :ranking
  def ranking
    product_ids = Review.group(:product_id).order('count_product_id DESC').limit(5).count(:product_id).keys
    @ranking = product_ids.map { |id| Product.find(id) }
  end
end

```


##### 要点チェック

* groupメソッドを使うと指定したカラムでレコードをまとめることができる
* groupメソッドに続けてcountメソッドを使うとまとめた各グループのレコード数が取得できる
* order('count_カラム名').count(カラム名)を使うと指定したカラムでグルーピングし、それぞれのレコード数でソートができる
* ハッシュのkeysメソッドを使うとハッシュのキーの配列が取得できる



<a name="application_user_register"></a>
## ユーザー登録機能

自分で書いたレビューをあとで見れるように、サインアップ画面をつくってユーザーを生成するようにしましょう。

### 1.deviseのファイルをインストールする

> Gemfileの末尾に以下の記述を追加

*Gemfile*:
```ruby
gem 'devise'
```

> bundle installコマンドを実行

*terminal*:
```sh
$ bundle install
```

> deviseを使うのに必要なファイルを生成

*terminal:*
```sh
$ rails g devise:install
```

> deviseのサインアップやログインのviewファイルを生成

*terminal:*
```sh
$ rails g devise:views
```

### 2.必要なファイルを入れ替える

置き換えるファイルは以下の2つのファイルです。

* app/views/devise/registrations/new.html.erb
* app/views/devise/sessions/new.html.erb

### 3.ユーザーのモデルを作成する

> ユーザーモデル作成のためのマイグレーションファイルが生成
```sh
$ rails g devise user
```

> usersテーブルを作成
```sh
$ bundle exec rake db:migrate
```

> 確認
```sh
$ rails s
```

http://localhost:3000/users/sign_up


<a name="application_user_signin_out"></a>
## サインアウト、ログイン機能

### 1.サインアウトボタンを設置する
サインアウトのボタンを投稿するボタンの横に設置しましょう。

deviseで実装されるサインアウトのリクエストは初期の状態ではDELETEメソッドです。

```sh
$ bundle exec rake routes
 Prefix Verb   URI Pattern                       Controller#Action
        new_user_session GET    /users/sign_in(.:format)          devise/sessions#new
            user_session POST   /users/sign_in(.:format)          devise/sessions#create
    destroy_user_session DELETE /users/sign_out(.:format)         devise/sessions#destroy

```

*app/views/layouts/review_site.html.erb:*
```html
<li class="entry_button" style="float: right">
  <%= link_to 'サインアウト', "/users/sign_out", method: :delete %>
</li>
```

### 2.サインアウト後のリダイレクトを設定する
サインアウト後にはログイン画面に遷移させるのが自然ですね。

サインアウト後のリダイレクト先のURLを設定するにはdeviseのメソッド`after_sign_out_path_for`を使いましょう。

> after_sign_out_path_forメソッド

deviseでサインアウトしたあとのリダイレクト先を指定するメソッドとしてafter_sign_out_path_forがあります。このメソッドでは返り値にサインアウト後のリダイレクト先URLを指定します。

*app/controllers/application_controller.rb:*
```ruby
def after_sign_out_path_for(resource)
  '/users/sign_in' # サインアウト後のリダイレクト先URL
end
```

### 3.サインインしていない場合はログイン画面にリダイレクトさせる
レビューの投稿はログインしている状態でないとできないようにしましょう。

トップページや作品ページはログインしていなくてもアクセスできます。

> authenticate_user!

deviseをインストールすると、ログイン画面とサインアップ画面を自動で用意してくれます。authenticate_user!はdeviseをインストールすることで使えるメソッドです。ユーザーがログインしているかどうかを確認し、ログインしていない場合はログインページにリダイレクトします。通常、before_actionを合わせて使用します。before_actionのexceptやonlyオプションを組み合わせると特定のアクションを指定することもできます。

*app/controllers/products_controller.rb:*
```ruby
  before_action :authenticate_user!, only: :search
```

*app/controllers/reviews_controller.rb:*
```ruby
  before_action :authenticate_user!, only: :new
```



<a name="application_avatar"></a>
## アイコン画像のアップロード機能

`paperclip`を使って画像のアップロード機能をつけよう

画像アップロード用のgemであるpaperclipを使って、画像のアップロード機能を実装しましょう。paperclipを使うと非常に簡単に画像のアップロード機能を実装することができます。

### 1.paperclipをインストールする
paperclipを使うにはImageMagickという画像変換ツールをパソコン内にインストールする必要があります(これはgemとは別のツールです)。

> Image Magick

ImageMagickは、コマンドラインから簡単に画像の保存形式の変更などが行えるツールです。

すでにImageMagickがインストール済みかどうかはターミナルでwhich convertコマンドを使ってパスが表示されるかで判断できます。コマンドを使うディレクトリはどこでも良いです。

*terminal:*
```sh
$ which convert
/usr/local/bin/convert  # このようにパスが表示されていればImageMagickのインストールは完了しています
```

もし、エラーが出た人はまだImageMagickをインストールしていないので、以下のコマンドでインストールしましょう。

```sh
$ brew install imagemagick
```

> paperclipをインストール

*Gemfile:*
```ruby
gem 'paperclip'
```

*terminal:*
```sh
$ bundle install
```

gemを新しくインストールしたのでサーバーを再起動しましょう。

*terminal:*
```sh
$ rails s
```

gemが導入できたかどうかはmooovi/Gemfile.lockというファイルの中を見て確認します。以下のようにpaperclipがあれば正常にインストールされています。


### 2.usersテーブルにpaperclip用のカラムを追加する
ユーザーのアイコン画像をアップロードして設定できるようにします。つまり、ユーザーモデルにアイコン画像用のカラムを追加する必要があるということです。これもpaperclipを使うとほとんど自動で設定してくれます。

ユーザーモデルに追加するアイコン画像のカラム名は`avatar`にしましょう。カラム追加用のマイグレーションファイルはpaperclipのコマンド`rails g paperclip`で生成できます。

*terminal:*
```sh
#usersテーブルにavatarカラムを追加するためのマイグレーションファイルを作成
$ rails g paperclip user avatar

#マイグレーションファイルの実行
$ bundle exec rake db:migrate```


### 3.userモデルにpaperclipの設定を追記する
Userモデルにアイコン画像の設定を記述しなくてはいけません。記述しなくてはいけない設定は`has_attached_file`と`validates_attachment_content_type`の2つです。

> has_attached_file

`has_attached_file`では画像用のカラムのサイズやデフォルト画像、画像ファイルの保存先を設定できます。

```ruby
class モデル名 < ActiveRecord::Base

  has_attached_file :カラム名,
                    styles:  { medium: "画像サイズ", thumb: "画像サイズ" }
```

サイズを指定するための属性はstylesです。stylesではどのような種類の画像をどの大きさで保存するか指定します。「medium」や「thumb」はImageMagickで保存できる画像の種類です。

画像サイズの指定はImageMagickでの指定方法に準じます。以下のような指定方法があります。

画像サイズの指定方法

指定方法 | 備考
- | -
100×100| 横100px、縦100pxの画像(アスペクト比を保つ)
100×100!|  アスペクト比を無視
100×100> | 一番長い辺を100pxにするようにリサイズ(アスペクト比を保つ)
100×100^  |一番短い辺を100pxにするようにリサイズ(アスペクト比を保つ)
100×100# | アスペクト比を保ち一番短い辺を100pxにするようにリサイズし、画像を中央によせ、はみ出た部分は切り取る

> validates_attachment_content_type

`validates_attachment_content_type`は画像のバリデーションを設定します。サイズや画像の種類でバリデーションが可能です。

```ruby
class モデル < ActiveRecord::Base

  validates_attachment_content_type :カラム名,
                                    content_type: ["画像の種類"]
```

アップロードを許可する画像の種類の指定をします。
画像の種類を指定するための属性はcontent_typeです。content_typeでは許可する画像の種類の配列を指定します。

画像の種類の指定方法

指定方法 | 備考
- | -
image/jpg |jpgファイル
image/jpeg | jpegファイル
image/png |pngファイル
image/gif| gifファイル
```ruby
class モデル < ActiveRecord::Base

  validates_attachment_content_type :カラム名,
                                    content_type: ["image/jpeg", "image/png"]
```


> 今回のUserモデルのカラムavatarでは以下の指定をしましょう。

* has_attached_file

属性：styles

種類：medium: "300x300#", thumb: "100x100#"

* validates_attachment_content_type

属性：content_type

種類：["image/jpg","image/jpeg","image/png"]

> 画像データを生成する

`File.new("app/assets/images/画像ファイル名", "r")`





<a name="application_nickname_avatar_view"></a>
## サインアップ画面でニックネームと画像を設定

paperclipによってユーザーのアイコン画像のアップロードが可能となったのでサインアップ画面でアイコン画像の設定をするビューをつくりましょう。さらにユーザーのニックネームもサインアップ画面で設定できるようにしましょう。


### １.usersテーブルにニックネームカラムを追加する

*terminal:*
```sh
#nicknameカラムを追加するマイグレーションファイルを作成
$ rails g migration AddNicknameToUsers nickname:string

#マイグレーションファイルの実行
$ bundle exec rake db:migrate
```

### 2.ビューを追加する

カラムが追加できたので、続いてサインアップ画面にニックネームを入力するフォームとアイコン画像をアップロードできるフォームを作りましょう。

サインアップ画面はRailsのform_forメソッドを使って記述されています。
ニックネームはテキストフィールド、アイコン画像にはファイルフィールドと呼ばれるファイルのアップロード用のフィールドを生成します。
テキストフィールドは`text_field`、ファイルフィールドは`file_field`のフォームタグを利用することで生成できます。また、カラム名の指定も忘れずにしましょう。

*app/views/devise/registrations/new.html.erb:*
```html
  <div class="label"><%= f.label :nickname %><br />
  <%= f.text_field :nickname %></div>
  <div class="field">
  <%= f.file_field :avatar %></div>
```


### 3.ストロングパラメーターを追加する
しかし、今のままニックネームを入力とアイコン画像をアップロードしてユーザーの作成ボタンを押すと、nicknameとavatarが設定されません。これはdeviseで設定されているstrong_parametersによってnicknameとavatarのパラメータがはじかれているからです。

そこで、deviseのstrong_parametersに新しく許可するパラメータを追加する必要があります。deviseではそのためのメソッド`devise_parameter_sanitizer`が用意されています。

> devise_parameter_sanitizer

devise_parameter_sanitizerメソッドを使うとdeviseで設定されているstrong_parametersに対してパラメータを追加することができます。具体的な使い方は以下です。

```ruby
devise_parameter_sanitizer.for(追加したいメソッドの種類).push(追加したいパラメータ名)

```

devise_parameter_sanitizerメソッドで指定する引数は2種類あります。1つ目が「StrongParametersを追加したい処理の種類」です。

引数の値 | 処理
- | -
:sign_up | 新規登録時
:sign_in | ログイン時
:account_update | モデルの更新時


2つ目の引数には追加したいパラメータ名を渡します。複数のパラメータを送る場合は,(カンマ)区切りで渡します。

```ruby
  devise_parameter_sanitizer.for(追加したいメソッドの種類).push(:パラメータ1, :パラメータ2,..)

```

また、devise_parameter_sanitizerメソッドはbefore_actionに設定します。これはdeviseの処理であるので、記述するのはDeviseのコントローラを継承したコントローラかもしくはApplicationControllerです。

しかし今回Deviseのコントローラを継承したコントローラは作成していないのでApplicationControllerに記述しましょう。

devise_parameter_sanitizerメソッドを直接before_actionに記述してはいけません。devise_parameter_sanitizerを呼び出すためのメソッドを作成してそのメソッドを呼び出すようにしましょう。

*application_controller.rb:*
```ruby
  before_action :configure_permitted_parameters

  def configure_permitted_parameters
    # devise_parameter_sanitizerメソッドを呼び出す
  end
```


実は、devise_parameter_sanitizerメソッドはdeviseで追加されたメソッドなので、Deviseのコントローラ以外で呼び出すことができません。よって、before_actionを適応するコントローラを指定します
```ruby
  before_action :メソッド名, if: :コントローラ名?
```





### 4.バリデーションを設定する

現在の状態ではパスワードとIDさえ入力していればサインアップできます。しかしニックネームも必須の入力項目にしたいです。そこでニックネームが入力されていなければエラーを返すようにバリデーションを設定しましょう。

さらにニックネームが必須項目であることを知らせるために以下のようにテキストフィールドにプレイスホルダーを設定しましょう。

>validation(検証)

validationとは、入力フォームを通じてビューからサーバー側へパラメーターが送られてきた際、正常な値か検証することができる機能です。

>validates :カラム名, presence: true

フォームの中身があるかないかを検出し、無い場合は保存を実行せず元のビューにリダイレクトします。

例えば、userのemailを入力必須にしたい場合、以下のように書くことができます。

*user.rb:*
```ruby
class User < ActiveRecord::Base
    validates :email, presence: true
```

> placeholder: ''

フォームの中に、''で囲んだ文字をフォームの値が空の時に薄く表示しておくことができます。userが何を入力すれば良いかわかりやすくするためです。text_fieldメソッドのオプションとして、以下のように利用します。

```html
<%= f.text_field :nickname, placeholder: 'ニックネームを入力（必須）' %>
```


*app/models/user.rb:*
```ruby
  validates :nickname, presence: true
```

*app/views/devise/registrations/new.html.erb:*
```html
  <%= f.text_field :nickname, placeholder: 'ニックネームを入力(必須)' %></div>

```


### 5.アソシエーションを利用しよう

せっかくニックネームを入力できるようにしたので、レビューの投稿画面にあるニックネームの入力欄は消してしまいましょう。また、レビューの保存時に「誰が書いたレビューなのか」という情報も保存し、レビューの表示時にレビューを書いた人のnicknameを表示できるよう実装しましょう。

#### 1.ニックネームの入力欄を消す

*app/views/reviews/new.html.erb:* を編集し、不要なフォームを削除しましょう
```html
  <div style="margin: 8px 0">
    <%= f.label :ニックネーム, style: { 'margin-right' => 8 } %>
    <%= f.text_field :nickname, placeholder: 'ニックネーム' %>
  </div>
```

> reviewを新規投稿する際、投稿者のnicknameをreviewsテーブルに保存

*app/controllers/reviews_controller.rb:*
```ruby
    private
    def create_params
      params.require(:review).permit(:rate, :review).merge(product_id: params[:product_id], nickname: current_user.nickname)
    end
```




#### 2.userモデルとreviewモデルの間にアソシエーションを設定する

> reviewsテーブルのnicknameカラムを削除

```sh
#reviewsテーブルからnicknameカラムを削除するためのマイグレーションファイルを作成
$ rails g migration RemoveNickNameFromReviews nickname:string

#マイグレーションファイルの実行
$ bundle exec rake db:migrate
```

> reviewsテーブルにuser_idカラムを追加

```sh
#reviewsテーブルにuser_idカラムを追加するためのマイグレーションファイルを作成
$ rails g migration AddUserIdToReviews user_id:integer

#マイグレーションファイルの実行
$ bundle exec rake db:migrate
```


> reviewとuserの間にアソシエーションを設定

*app/models/user.rb:*
```ruby
  has_many :reviews
```

*app/models/user.rb:*
```ruby
  belongs_to :user
```

*app/controllers/reviews_controller.rb:*
```ruby
  params.require(:review).permit(:rate, :review).merge(product_id: params[:product_id], user_id: current_user.id)

```

*app/views/products/show.html.erb:*
```ruby
<h3 class="text-xsmall text-overflow" title="<%= review.user.nickname %>">
  <span><i class="icon-rate-60 text-xxsmall opacity-60" title=""></i></span><%= review.user.nickname %><small 2014=""></small>
</h3>
```

<a name="application_mypage"></a>
## マイページ

### 1.マイページに遷移できるようにする

自分の書いたレビューの一覧が見られるマイページを実装しましょう。

マイページは、userの詳細ページだということもできます。そこで、新たにusers_controllerを作成し、`show`アクションを定義しましょう。

> users_controllerを作成
```sh
$ rails g controller users
```

> showアクションを定義
*app/controllers/users_controller.rb*
```ruby
class UsersController < ApplicationController
  def show
  end
end
```

> ルーティング設定
*config/routes.rb*
```ruby
TechReviewSite::Application.routes.draw do

  devise_for :users
  resources :users, only: :show
  resources :products, only: :show do
    resources :reviews, only: [:new, :create]
    collection do
      get 'search'
    end
  end

  root 'products#index'

end
```

> マイページに遷移するボタンを作成

*app/views/layouts/review_site.html.erb:*
```html
              <% if user_signed_in? %>
                <li class="entry_button" style="float: right">
                  <%= link_to "サインアウト", destroy_user_session_path, method: :delete %>
                </li>
                <li class="entry_button" style="float: right">
                  <a href="/users/<%= current_user.id %>">マイページ</a>
                </li>
              <% end %>

```


### 2.マイページのビューを追加する

ダウンロードしたrails2フォルダに入っているshow.html.erbファイルをviews/usersフォルダに移動しましょう

### 3.ユーザーの情報を表示する

マイページなので表示する情報は自分の情報にしましょう。マイページ画面で呼ばれるアクションはUsersControllerのshowアクションなので、対応するビューは`app/views/users/show.html.erb`となります。

>  image_tag

image_tagは、htmlの<img>タグを生成するヘルパーメソッドです。以下の例のように引数に文字列で画像ファイルのパスを取ります。

```html
  <%= image_tag "image/sample.jpg" %> #=> <img src="image/sample.jpg">

```

> マイページに、ログイン中のuserの情報を表示しましょう

*app/views/users/show.html.erb:*
```html
          <div class="user_image"><%= image_tag  current_user.avatar %></div>
          <h2><%=  current_user.nickname %> <span>さんのマイページ</span></h2>

```


### 4.自分のレビューの一覧を表示する

自分のレビューの情報はアソシエーションを使えば取得できますね。
今回も呼ばれるアクションはusers_controllerのshowアクションなので、対応するビューはapp/views/users/show.html.erbとなります。

> マイページにおいて、自分が投稿したレビューの一覧を表示

*app/views/users/show.html.erb:*
```html
    <%  current_user.reviews.each do |review| %>
      <li style="background-image: url(<%= review.product.image_url %>)">
        <div class="meta">
          <header>
            <div class="title"><%= review.product.title %></div>
            <span class="star"><span class="rating-star"><i class="star-actived rate-<%= review.rate %>0"></i></span></span>
          </header>
          <div class="user_review"><%= review.review %></div>
        </div>
      </li>
    <% end %>
```





























