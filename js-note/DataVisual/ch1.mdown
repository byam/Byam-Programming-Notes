# Chapter 1: Graphing Data


For this chapter we’ll use the [Flotr2 library](http://www.humblesoftware.com/flotr2/). Flotr2 makes it easy to add standard bar charts, line charts, and pie charts to any web page, and it also supports some less common chart types. We’ll take a look at all of these techniques in the examples that follow. Here’s what you’ll learn:

* [Bar charts](#ch1_bar)

    The workhorse of charts. Effective at showing the change of a quantity over a small number of regular time intervals, or at comparing several different quantities against one another.

* [Line charts](#ch1_line)

    More effective than bar charts when there is a large number of data values to show, or for showing quantities that vary on an irregular schedule.

* [Pie charts](#ch1_pie)

    Often overused but can be effective to highlight the proportion of a single value within a whole.

* [Scatter charts](#ch1_scatter)

    Effective for showing possible relationships between two values.

* [Bubble charts](#ch1_bubble)

    Adds a third value to scatter charts but should be used carefully, as it’s difficult to accurately assess the relative areas of circular regions.

* [Radar charts](#ch1_radar)

    Designed to show several aspects of the subject on one chart. Not as familiar to many users but can be effective for certain special- ized cases.



---

<a name="ch1_bar"></a>
# Creating a Basic Bar Chart

## Draw the Simple Chart

Download javascript file:

* [flotr2.min.js](https://github.com/byam/Byam-Programming-Notes/blob/master/js-note/DataVisual/ch1/bar-charts/js/flotr2.min.js)
* [excanvas.min.js](https://github.com/byam/Byam-Programming-Notes/blob/master/js-note/DataVisual/ch1/bar-charts/js/excanvas.min.js)


*index.html:*
```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title></title>
  </head>

  <body>

    <div id="chart" style="width:600px;height:400px;"></div>

    <!-- [if lt IE 9]><script src="js/excanvas.min.js"></script><![endif] -->

    <!-- Flotr2 library script -->
    <script src="js/flotr2.min.js"></script>

    <!-- Our manipulation file -->
    <script src="js/bar_plot.js"></script>

  </body>
</html>
```

*bar_plot.js:*
```js
// sample data
var wins = [[[2006,13],[2007,11],[2008,15],[2009,15],[2010,18],[2011,21],
             [2012,28]]];


window.onload = function () {
    // creating bar plot
    Flotr.draw(document.getElementById("chart"), wins, {
        bars: {
            show: true
        }
    });
};
```

It will produce:

![bar_plot1](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/bar-charts/images/bar_plot1.png)


---

## Fixed Chart

#### Fix the Vertical Axis

Setting the Vertical Axis

* minimun scale
* formatting

*bar_plot.js*
```js
var wins = [[[2006,13],[2007,11],[2008,15],[2009,15],[2010,18],[2011,21],
             [2012,28]]];

window.onload = function () {
    Flotr.draw(document.getElementById("chart"), wins, {
        bars: {
            show: true
        },

        // fixing vertical axis
        yaxis: {
            min: 0,
            tickDecimals: 0
        }
    });
};
```

The min property sets the minimum value for the y-axis, and the tickDecimals property tells Flotr2 how many decimal places to show for the labels. In our case we don’t want any decimal places.

It will produce:

![bar_plot2](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/bar-charts/images/bar_plot2.png)


#### Fix the Horizontal Axis

Setting the Vertical Axis

* x-axes values to strings
* spacing between the bars

For the more general case, let’s first change our data to use simple numbers rather than years for the x-values. Then we’ll create an array that maps those simple numbers to arbitrary strings, which we can use as labels.

*bar_plot.js:*
```js
// simple data as mapped
var wins = [[[0,13],[1,11],[2,15],[3,15],[4,18],[5,21],[6,28]]];

// mapping label data
var years = [
    [0, "2006"],
    [1, "2007"],
    [2, "2008"],
    [3, "2009"],
    [4, "2010"],
    [5, "2011"],
    [6, "2012"]
];

window.onload = function () {
    Flotr.draw(document.getElementById("chart"), wins, {
        bars: {
            show: true,
            barWidth: 0.5       // space between bars
        },

        yaxis: {
            min: 0,
            tickDecimals: 0
        },

        xaxis: {
            ticks: years        // labels match which x-values
        }
    });
};
```

It will produce:

![bar_plot3](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/bar-charts/images/bar_plot3.png)


#### Adjust the Styling

Adding:

* title
* get rid of the unnecessary grid lines
* adjust the coloring of the bars.

```js
// changing only inside the Flotr.draw()
Flotr.draw(document.getElementById("chart"), wins, {
    title: "Manchester City Wins",

    colors: ["#89AFD2"],

    bars: {
        show: true,
        barWidth: 0.5,
        shadowSize: 0,
        fillOpacity: 1,
        lineWidth: 0
    },

    yaxis: {
        min: 0,
        tickDecimals: 0
    },

    xaxis: {
        ticks: years
    },

    grid: {
        horizontalLines: false,
        verticalLines: false
    }
});
```


It will produce:

![bar_plot4](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/bar-charts/images/bar_plot4.png)


---

## Vary the Bar Color

Creating multiple series lets Flotr2 color each independently.


*bar_plot.js:*
```js
var wins = [[[0,28]],[[1,28]],[[2,21]],[[3,20]],[[4,19]]];
var teams = [
    [0, "MCI"],
    [1, "MUN"],
    [2, "ARS"],
    [3, "TOT"],
    [4, "NEW"]
];

window.onload = function () {
    Flotr.draw(document.getElementById("chart"), wins, {
        title: "Premier League Wins (2011-2012)",

        colors: ["#89AFD2", "#1D1D1D", "#DF021D", "#0E204B", "#E67840"],

        bars: {
            show: true,
            barWidth: 0.5,
            shadowSize: 0,
            fillOpacity: 1,
            lineWidth: 0
        },

        yaxis: {
            min: 0,
            tickDecimals: 0
        },

        xaxis: {
            ticks: teams
        },

        grid: {
        horizontalLines: false,
        verticalLines: false
        }
    });
};
```


It will produce:

![bar_plot5](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/bar-charts/images/bar_plot5.png)


---

## Bug

In the process of con- structing its charts, Flotr2 creates dummy HTML elements so it can calculate their sizes.

Flotr2 intends to place these dummy elements 10,000 pixels above the top of the browser window.

To fix:
```js
$(".flotr-dummy-div").parent().hide();
```




---

<a name="ch1_line"></a>
# Plotting Continuous Data with a Line Chart

## Graphing the Data

#### Graphing One data

*line_chart.js:*
```js
var co2 = [
    [ 2000, 369.52 ],
    [ 2001, 371.13 ],
    [ 2002, 373.22 ],
    [ 2003, 375.77 ],
    [ 2004, 377.49 ],
    [ 2005, 379.80 ],
    [ 2006, 381.90 ],
    [ 2007, 383.77 ],
    [ 2008, 385.59 ],
    [ 2009, 387.37 ],
    [ 2010, 389.85 ],
    [ 2011, 391.62 ],
]

window.onload = function () {
    Flotr.draw(
        document.getElementById("chart"),
        [
            { data: co2, lines: {show:true} }   // setting data here
        ]
    );
};
```

It will produce:

![line_chart1](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/line-charts/images/line_chart1.png)


#### Adding data


*line_chart.js:*
```js
var co2 = [
    [ 2000, 369.52 ],
    [ 2001, 371.13 ],
    [ 2002, 373.22 ],
    [ 2003, 375.77 ],
    [ 2004, 377.49 ],
    [ 2005, 379.80 ],
    [ 2006, 381.90 ],
    [ 2007, 383.77 ],
    [ 2008, 385.59 ],
    [ 2009, 387.37 ],
    [ 2010, 389.85 ],
    [ 2011, 391.62 ],
];

var temp = [
    [ 2000,  0.4264 ],
    [ 2001,  0.5496 ],
    [ 2002,  0.6121 ],
    [ 2003,  0.6211 ],
    [ 2004,  0.5779 ],
    [ 2005,  0.6510 ],
    [ 2006,  0.5977 ],
    [ 2007,  0.5923 ],
    [ 2008,  0.5134 ],
    [ 2009,  0.5985 ],
    [ 2010,  0.6621 ],
    [ 2011,  0.5362 ],
];

window.onload = function () {
    Flotr.draw(
        document.getElementById("chart"),
        [
            { data: co2, lines: {show:true} },
            { data: temp, lines: {show:true}, yaxis: 2 }    // added new data here
        ]
    );
};
```


It will produce:

![line_chart2](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/line-charts/images/line_chart2.png)


---

## Improve the Chart’s Readability

* eliminate the grid lines
* extend the range of both vertical axes to provide a bit of breathing room for the chart. Both of these changes are additional options to the draw() method.

```js
Flotr.draw(
    document.getElementById("chart"),

    [
        { data: co2, lines: {show:true} },
        { data: temp, lines: {show:true}, yaxis: 2 }
    ],

    {
        grid: {
            horizontalLines: false,
            verticalLines: false
        },

        yaxis: {min: 300, max: 400},

        y2axis: {min: -0.15, max: 0.69}
    }
);
```


It will produce:

![line_chart3](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/line-charts/images/line_chart3.png)


#### Clarify the Temperature Measurements

Adding series of data zero.
```js
var zero = [];
for (var yr=1959; yr<2012; yr++) { zero.push([yr, 0]); };
```


```js
Flotr.draw(
    document.getElementById("chart"),
    [
        { data: zero, lines: {show:true, lineWidth: 1}, yaxis: 2, shadowSize: 0, color: "#545454" },
        { data: co2, lines: {show:true} },
        { data: temp, lines: {show:true}, yaxis: 2 }
    ],

    {
        grid: {horizontalLines: false, verticalLines: false},
        yaxis: {min: 300, max: 400},
        y2axis: {min: -0.15, max: 0.69}
    }
);
```

It will produce:

![line_chart4](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/line-charts/images/line_chart4.png)

#### Label the Chart

The overall chart title merits its own option, and we add the “°C” suffix using a tickFormatter() function.


```js
Flotr.draw(
    document.getElementById("chart"),

    [
        {
            data: zero,
            label: "20<sup>th</sup> Century Baseline Temperature",
            lines: {show:true, lineWidth: 1},
            shadowSize: 0,
            color: "#545454"
        },
        {
            data: temp,
            label: "Yearly Temperature Difference (°C)",
            lines: {show:true}},
        {
            data: co2,
            label: "CO<sub>2</sub> Concentration (ppm)",
            lines: {show:true},
            yaxis: 2 },
     ],

    {
        title: "Global Temperature and CO<sub>2</sub> Concentration (NOAA Data)",
        grid: {horizontalLines: false, verticalLines: false},
        y2axis: {min: 300, max: 400},
        yaxis: {min: -0.15, max: 0.69,
                tickFormatter: function(val) {return val+" °C";}},
     }
);
```

![line_chart5](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/line-charts/images/line_chart5.png)


---

<a name="ch1_pie"></a>
# Emphasizing Fractions Using a Pie Chart

Pie charts can be quite effective is when we want to compare a single partial value against a whole.

## Draw the Simple Pie Chart

> For pie charts, the x-values are irrelevant, so we simply include the placeholder values 0 and 1.

*pie_chart.js*
```js
var data = [[[0,22.4]],[[1,77.6]]];

window.onload = function () {
    Flotr.draw(document.getElementById("chart"), data, {
        pie: {
            show: true
        },

        yaxis: {
            showLabels: false
        },

        xaxis: {
            showLabels: false
        },

        grid: {
            horizontalLines: false,
            verticalLines: false
        }
    });
};
```



![pie_chart1](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/pie-charts/images/pie_chart1.png)

## Labeled Pie chart

*pie_chart.js:*
```js
var data = [
    // create an object to store each series
    {data: [[0,22.4]], label: "Extreme Poverty"},
    {data: [[1,77.6]]}
];

window.onload = function () {
    Flotr.draw(document.getElementById("chart"), data, {
        title: "How Much of the World Lives on $1.25/Day?",

        pie: {
            show: true
        },

        yaxis: {
            showLabels: false
        },

        xaxis: {
            showLabels: false
        },

        grid: {
        horizontalLines: false,
        verticalLines: false
        }
    });
};
```



![pie_chart2](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/pie-charts/images/pie_chart2.png)


---

<a name="ch1_scatter"></a>
# Plotting X/Y Data with a Scatter Chart

> We want to explore the relationship between two different quantities, a scatter chart can be more effective.

## Simple Scatter Chart

*scatter.js:*
```js
// define the Data
var health_data = [
    {  country: "Australia",       spending:  9.1,  life: 81.8  },
    {  country: "New Zealand",     spending: 10.1,  life: 81.0  },
    {  country: "Austria",         spending: 11.0,  life: 80.7  },
    // Data set continues...
];


// Format the Data
var data = [];
for (var i = 0; i < health_data.length; i++) {
    data.push([
        health_data[i].spending,
        health_data[i].life
    ]);
};


// Plot the Data
window.onload = function () {
    Flotr.draw(
        document.getElementById("chart"),
        [{data: data, points: {show: true}}]
     );
};
```

![scatter_chart1](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/scatter-charts/images/scatter_chart1.png)


## Labeled & Fixed Scatter Chart

```js
Flotr.draw(
    document.getElementById("chart"),
    [{
        data: data,
        points: {show: true}
    }],
    {
        title: "Life Expectancy vs. Health-Care Spending",
        subtitle: "(by country, 2010 OECD data)",
        xaxis: {min: 5, max: 20, tickDecimals: 0,
                title: "Spending as Percentage of GDP",
                tickFormatter: function(val){return val+"%"}},
        yaxis: {min: 70, max: 85, tickDecimals: 0,
                title: "Years"}
    }
 );
```

![scatter_chart2](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/scatter-charts/images/scatter_chart2.png)


## Vary Scatter Charts

Define the Data:
```js
var pacific_data = [
    {  country: "Australia",       spending:  9.1,  life: 81.8  },
    {  country: "New Zealand",     spending: 10.1,  life: 81.0  },
];

var europe_data = [
    {  country: "Austria",         spending: 11.0,  life: 80.7  },
    {  country: "Belgium",         spending: 10.5,  life: 80.3  },
    {  country: "Czech Republic",  spending:  7.5,  life: 77.7  },
    {  country: "Denmark",         spending: 11.1,  life: 79.3  },
    {  country: "Estonia",         spending:  6.3,  life: 75.6  },
    {  country: "Finland",         spending:  8.9,  life: 80.2  },
    {  country: "France",          spending: 11.6,  life: 81.3  },
    {  country: "Germany",         spending: 11.6,  life: 80.5  },
    {  country: "Greece",          spending: 10.2,  life: 80.6  },
    {  country: "Hungary",         spending:  7.8,  life: 74.3  },
    {  country: "Iceland",         spending:  9.3,  life: 81.5  },
    {  country: "Ireland",         spending:  9.2,  life: 81.0  },
    {  country: "Italy",           spending:  9.3,  life: 82.0  },
    {  country: "Luxembourg",      spending:  7.9,  life: 80.7  },
    {  country: "Netherlands",     spending: 12.0,  life: 80.8  },
    {  country: "Norway",          spending:  9.4,  life: 81.2  },
    {  country: "Poland",          spending:  7.0,  life: 76.3  },
    {  country: "Portugal",        spending: 10.7,  life: 79.8  },
    {  country: "Slovak Republic", spending:  9.0,  life: 75.2  },
    {  country: "Slovenia",        spending:  9.0,  life: 79.5  },
    {  country: "Spain",           spending:  9.6,  life: 82.2  },
    {  country: "Sweden",          spending:  9.6,  life: 81.5  },
    {  country: "Switzerland",     spending: 11.4,  life: 82.6  },
    {  country: "Turkey",          spending:  6.1,  life: 74.3  },
    {  country: "United Kingdom",  spending:  9.6,  life: 80.6  },
];

var americas_data = [
    {  country: "Canada",          spending: 11.4,  life: 80.8  },
    {  country: "Chile",           spending:  8.0,  life: 79.0  },
    {  country: "Mexico",          spending:  6.2,  life: 75.5  },
    {  country: "United States",   spending: 17.6,  life: 78.7  },
];

var mideast_data = [
    {  country: "Israel",          spending:  7.5,  life: 81.7  },
];

var asia_data = [
    {  country: "Japan",           spending:  9.5,  life: 83.0  },
    {  country: "Korea",           spending:  7.1,  life: 80.7  },
];

var us_data = [
    {  country: "United States",   spending: 17.6,  life: 78.7  },
];

var pacific=[], europe=[], americas=[], mideast=[], asia=[], us=[];
for (i = 0; i < pacific_data.length; i++) {
    pacific.push([ pacific_data[i].spending, pacific_data[i].life ]);
}
for (i = 0; i < europe_data.length; i++) {
    europe.push([ europe_data[i].spending, europe_data[i].life ]);
}
for (i = 0; i < americas_data.length; i++) {
    americas.push([ americas_data[i].spending, americas_data[i].life ]);
}
for (i = 0; i < mideast_data.length; i++) {
    mideast.push([ mideast_data[i].spending, mideast_data[i].life ]);
}
for (i = 0; i < asia_data.length; i++) {
    asia.push([ asia_data[i].spending, asia_data[i].life ]);
}
for (i = 0; i < us_data.length; i++) {
    us.push([ us_data[i].spending, us_data[i].life ]);
}
```



Plot the Scatter Chart:

```js
window.onload = function () {
    Flotr.draw(
        document.getElementById("chart"),
        [
            { data: pacific, label: "Pacific", points: {show:true} },
            { data: europe, label: "Europe", points: {show:true} },
            { data: americas, label: "Americas", points: {show:true} },
            { data: mideast, label: "Middle East", points: {show:true} },
            { data: asia, label: "Asia", points: {show:true} },
            { data: us, label: "United States", points: {show:true} }
        ],
        {
            title: "Life Expectancy vs. Health-Care Spending",
            subtitle: "(by country, 2010 OECD data)",
            xaxis: {min: 5, max: 20, tickDecimals: 0,
                    title: "Spending as Percentage of GDP",
                    tickFormatter: function(val){return val+"%"}},
            yaxis: {min: 70, max: 85, tickDecimals: 0,
                    title: "Years"}
        }
     );
};
```

![scatter_chart3](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/scatter-charts/images/scatter_chart3.png)

---

<a name="ch1_bubble"></a>
# Adding Magnitudes to X/Y Data with a Bubble Chart

> If we need to visual- ize three variables, we could use a scatter plot framework for two of the variables and then vary the size of the points according to the third variable. The resulting chart is a bubble chart.


## Simple Bubble Chart

*bubble_chart.js:*
```js
// Define the Data
var katrina = [
    { north: 23.2, west: 75.5, wind:  35 },
    { north: 24.0, west: 76.4, wind:  35 },
    { north: 25.2, west: 77.0, wind:  45 },
    { north: 26.0, west: 77.6, wind:  45 },
    { north: 26.2, west: 78.7, wind:  50 },
    { north: 26.1, west: 79.9, wind:  75 },
    { north: 25.5, west: 80.7, wind:  75 },
    { north: 25.1, west: 82.2, wind: 100 },
    { north: 24.8, west: 82.9, wind: 100 },
    { north: 24.4, west: 84.0, wind: 110 },
    { north: 24.4, west: 84.6, wind: 115 },
    { north: 25.1, west: 86.8, wind: 145 },
    { north: 25.7, west: 87.7, wind: 160 },
    { north: 26.5, west: 88.6, wind: 175 },
    { north: 27.9, west: 89.5, wind: 160 },
    { north: 29.7, west: 89.6, wind: 135 },
    { north: 30.8, west: 89.6, wind: 105 },
    { north: 31.9, west: 89.6, wind:  75 },
    { north: 32.9, west: 88.9, wind:  65 },
    { north: 34.7, west: 88.4, wind:  50 },
];

// format the Data
function get_points(source_array, filter_function) {
    var result = [];
    for (var i=0; i<source_array.length; i++) {
        if ( (typeof filter_function === "undefined")
            || (typeof filter_function !== "function")
            || filter_function(source_array[i]) ) {
               result.push([
                   source_array[i].west * -1,
                   source_array[i].north,
                   source_array[i].wind
                ]);
       }
    }
    return result;
}

window.onload = function () {
    Flotr.draw(
        document.getElementById("chart"),
        [{
            data: get_points(katrina),
            bubbles: {show:true, baseRadius: 0.3}
        }]
     );
};
```

![bubble_chart1](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/bubble-charts/images/bubble_chart1.png)



## Add the Background

```js
Flotr.draw(
    document.getElementById("chart"),
    [{
        data: get_points(katrina),
        bubbles: {show:true, baseRadius: 0.3}
    }],
    {
        grid: {
            backgroundImage : "./images/gulf.png",      // <-----
            horizontalLines : false,
            verticalLines: false
        },
        yaxis: {showLabels: false, min: 23.607, max: 33.657},
        xaxis: {showLabels: false, min: -94.298, max: -77.586},
    }
 );
```


![bubble_chart2](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/bubble-charts/images/bubble_chart2.png)




## Colored & Labeled Bubbles

Here’s where we can take advantage of the filter option we included in the data formatting function.

```js
cat1 = get_points(katrina, function(obs) {
    return (obs.wind >= 74) && (obs.wind < 95);
});
```


*bubble_chart.js:*
```js
Flotr.draw(
    document.getElementById("chart"),
    [
      {
        data: get_points(katrina, function(obs) {
            return (obs.wind < 39);
        }),
        color: "#74add1",
        bubbles: {show:true, baseRadius: 0.3, lineWidth: 1},
      },
      {
        data: get_points(katrina, function(obs) {
            return (obs.wind >= 39) && (obs.wind < 74);
        }),
        color: "#abd9e9",
        bubbles: {show:true, baseRadius: 0.3, lineWidth: 1},
      },
      {
        data: get_points(katrina, function(obs) {
            return (obs.wind >= 74) && (obs.wind < 95);
        }),
        color: "#ffffbf",
        label: "Category 1",
        bubbles: {show:true, baseRadius: 0.3, lineWidth: 1},
      },
      {
        data: get_points(katrina, function(obs) {
            return (obs.wind >= 95) && (obs.wind < 110);
        }),
        color: "#fee090",
        label: "Category 2",
        bubbles: {show:true, baseRadius: 0.3, lineWidth: 1},
      },
      {
        data: get_points(katrina, function(obs) {
            return (obs.wind >= 110) && (obs.wind < 130);
        }),
        color: "#fdae61",
        label: "Category 3",
        bubbles: {show:true, baseRadius: 0.3, lineWidth: 1},
      },
      {
        data: get_points(katrina, function(obs) {
            return (obs.wind >= 130) && (obs.wind < 157);
        }),
        color: "#f46d43",
        label: "Category 4",
        bubbles: {show:true, baseRadius: 0.3, lineWidth: 1},
      },
      {
        data: get_points(katrina, function(obs) {
            return (obs.wind >= 157);
        }),
        color: "#d73027",
        label: "Category 5",
        bubbles: {show:true, baseRadius: 0.3, lineWidth: 1},
      },
    ],
    {
        grid: {
            backgroundImage : "./images/gulf.png",
            horizontalLines : false,
            verticalLines: false
        },
        yaxis: {showLabels: false, min: 23.607, max: 33.657},
        xaxis: {showLabels: false, min: -94.298, max: -77.586},

        // "sw": south west
        legend: {position: "sw", backgroundOpacity: 0,},
    }
 );
```


![bubble_chart3](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/bubble-charts/images/bubble_chart3.png)




---

<a name="ch1_radar"></a>
# Displaying Multidimensional Data with a Radar Chart

Radar charts are most effective when your data has several characteristics:

* You don’t have too many data points to show. Half a dozen data points is about the maximum that a radar chart can accommodate.
* The data points have multiple dimensions. With two or even three dimen- sions to your data, you would probably be better off with a more tradi- tional chart type. Radar charts come into play with data of four or more dimensions.
* Each data dimension is a scale that can at least be ranked (from good to bad, say), if not assigned a number outright. Radar charts don’t work well with data dimensions that are merely arbitrary categories (such as political party or nationality).


![radar_data](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/radar-charts/images/radar_data.png)


## Plot Radar Charts



```js
// Define the Data
var players = [
    { player: "Chris Bosh", points: 17.2, rebounds: 7.9, assists: 1.6,
      steals: 0.8, blocks: 0.8 },
    { player: "Shane Battier",  points:  5.4, rebounds: 2.6, assists: 1.2,
      steals: 1.0, blocks: 0.5 },
    { player: "LeBron James",   points: 28.0, rebounds: 8.4, assists: 6.1,
      steals: 1.9, blocks: 0.8 },
    { player: "Dwyane Wade",    points: 22.3, rebounds: 5.0, assists: 4.5,
      steals: 1.7, blocks: 1.3 },
    { player: "Mario Chalmers", points: 10.2, rebounds: 2.9, assists: 3.6,
      steals: 1.4, blocks: 0.2 }
];

var team = {
    points:   98.2,
    rebounds: 41.3,
    assists:  19.3,
    steals:    8.5,
    blocks:    5.3
};


var get_player = function(name) {
    for (var i=0; i<players.length; i++) {
        if (players[i].player === name) return players[i]; }
}

// Normalizing players data
// Ex:  LeBron James’s scoring as 28.0
//      we’ll show it as 29 percent (28.0/98.2)
var player_data = function(name) {
    var obj = {}, i = 0;
    obj.label = name;
    obj.data = [];
    for (var key in team) {
        obj.data.push([i, 100*get_player(name)[key]/team[key]]);
        i++;
    };
    return obj;
};


// Labeling
var labels = [
    [0, "Points"],
    [1, "Rebounds"],
    [2, "Assists"],
    [3, "Steals"],
    [4, "Blocks"]
];


window.onload = function () {
    Flotr.draw(document.getElementById("chart"),
        [
            player_data("Chris Bosh"),
            player_data("Shane Battier"),
            player_data("LeBron James"),
            player_data("Dwyane Wade"),
            player_data("Mario Chalmers")
        ],
        {
            title:
                "2011/12 Miami Heat Starting Lineup — Contribution to Team Total",
            radar: { show: true },
            grid: { circular: true, },
            xaxis: { ticks: labels, },
            yaxis: { showLabels: false, min:0, max: 33, }
        }
    );
};
```

![radar_chart1](https://github.com/byam/Programming-Notes/blob/master/js-note/DataVisual/ch1/radar-charts/images/radar_chart1.png)


























































