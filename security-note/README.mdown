# 情報セキュリティ入門

本ノートの目的は、代表的なWebアプリケーションへの攻撃方法を知り、それに対する対策を理解することです。

* [1章 情報セキュリティとは](#security)

* [2章 Webアプリケーションのセキュリティを理解するための基礎知識](#security_basics)

    Webアプリケーションの脆弱性を理解するために必要な知識について学習していきます。そして、3章以降では代表的なWebアプリケーションの脆弱性をひとつずつ取り上げ、概要と対策方法を学んでいきます。

    * [HTTP](#security_basics_http)
    * [セッション/クッキー(cookie)](#security_basics_cookie)

* [3章 表示処理に伴う問題](#xss)

    xss(クロスサイトスクリプティング)という、外部からの入力に対しての脆弱性を突いた攻撃と対策に関して学びます。

    * [XSS（クロスサイトスクリプティング）](#xss_xss)
    * [XSSの対策](#xss_defence)

* [4章 SQL呼び出しに伴う脆弱性](#sql)

    SQLインジェクションという、アプリケーション側のSQLの呼び出し時のセキュリティ不備を意図的に利用する攻撃と対策に関して学びます。

    * [SQLインジェクションとは何か](#sql_sql)
    * [SQLインジェクションの攻撃例・対策](#sql_defence)

* [5章「重要な処理」に伴う脆弱性](#csrf)

    CSRF(クロスサイトリクエストフォージェリ)という、ユーザーにとって重要な処理を勝手に行ったことにしてしまう攻撃手法と対策に関して学びます。

    * [CSRF(クロスサイトリクエストフォージェリ)](#csrf_csrf)
    * [CSRFの対策](#csrf_defence)

* [6章 セッション管理の不備](#session)

    セッションハイジャックという、第2章で学ぶセッションに関する攻撃と対策に関して学びます。

    * [セッションハイジャックとは](#session_session)
    * [セッションハイジャックの攻撃手法・対策](#session_defence)
    * [Railsでのセッションハイジャック対策方法](#session_rails)

<a name="security"></a>
# 1章 情報セキュリティとは

## 情報セキュリティとは
情報セキュリティとは、Webサービスにおいてのセキュリティ(安全保障)です。情報セキュリティにおける理想は、「不正なアクセスや情報の漏洩を防ぎつつ、権限がある人は便利に利用できる」状態を維持することです。これを分解し言い換え、「機密性」「完全性」「可用性」の3つの要素を維持することを目標にします。

* **機密性**

    権限を持たない人が情報資産を見たり使用できないようにすること

* **完全性**

    権限を持たない人が情報を書き換えたり消したりできないようにすること

* **可用性**

    権限を持つ人がいつでも利用したいときに利用できるようにすること


## 脆弱性とは

脆弱性とは、コンピュータやネットワーク、アプリケーション全体のセキュリティに弱点を作り出すコンピュータソフトウェアの欠陥や仕様上の問題点のことをいいます。
つまり、アプリケーション上で悪意のある者に攻撃を仕掛けられる際の弱点と言い換えることができます。


### 脆弱性によってもたらされる被害

脆弱性がアプリケーション内に存在することによって、以下のような被害が想定されます。

* 個人情報を勝手に閲覧される(機密性侵害)
* Webページの内容が改ざんされる(完全性侵害)
* Webページ自体が利用不能になる(可用性侵害)

このような問題が起きてしまうと、利用者への金銭的損失の補填や補償、開発者の社会的信頼の失墜による売上の減少、Webサイト停止による機会損失など多くの被害を開発者だけではなく利用者も被ることになるため脆弱性対策は必須と言えるでしょう。

### 脆弱性が生まれる理由

なぜ脆弱性が生まれてしまうのでしょうか。大きく分けて二つの理由があります。
* 一つは、バグによるもの
* 二つ目は、開発者側のセキュリティチェック不足によるもの

ここでいうバグとは、後に説明するクロスサイトスクリプティングのように投稿フォーム等にscriptタグでJavascriptのコードを記述・送信することで、それがページに埋め込まれ、実行されてしまうといったようなプログラミング言語の仕様に起因するものようなことを言います。




<a name="security_basics"></a>
# 2章 Webアプリケーションのセキュリティを理解するための基礎知識

<a name="security_basics_http"></a>
## HTTP
HTTPとはWebブラウザとWebサーバの間でHTMLや画像ファイルなどのコンテンツの送受信に用いられる通信プロトコルです。私たちがWebページを閲覧・利用することができるのもHTTPという仕組みがあるからです。

### プロトコル
複数のユーザが滞りなく信号やデータ、情報を相互に伝送できるよう、あらかじめ決められた約束事や手順の集合のことです。

例えば人と人との会話を例にとると、片方が日本語で話し、もう片方がポルトガル語で話していては会話になりませんよね。そこで、会話を成立させるためには使用言語をきちんと決める必要があります。**この使用言語を何にするか決める役割が通信におけるプロトコルにあたります。**

クライアントとサーバー間でHTTP通信を行う際はメッセージのやり取りを行います。


* **クライアントからサーバーに対して以下のようなリクエストメッセージを送信します。**

| HTTPリクエスト
| - |
GET / HTTP/1.1 リクエストライン
Accept: image/gif, image/jpeg, / ヘッダ
Accept-Language: ja
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/4.0 (Compatible; MSIE 6.0; Windows NT 5.1;)
Host: www.xxx.zzz
Connection: Keep-Alive
(空行)
メッセージボディ(POSTメソッドなどで使用)

簡単に説明すると
www.xxx.zzz というアドレス
に対してHTTP/1.1というバージョンを使い、GETメソッドで"/"パスにアクセスしたい、というメッセージをクライアントからサーバに送っているのだという意味になります。

* **サーバは以下のようなレスポンスメッセージを返します。**

|HTTPレスポンス
|-
HTTP/1.1 200 OK ステータスライン
Date: Sun, 11 Jan 2004 16:06:23 GMT ヘッダ
Server: Apache/1.3.22 (Unix) (Red-Hat/Linux)
Last-Modified: Sun, 07 Dec 2003 12:34:18 GMT
ETag: "1dba6-131b-3fd31e4a"
Accept-Ranges: bytes
Content-Length: 4891
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Content-Type: text/html
(空行)
htmlやcssの情報(メッセージボディ)

ステータスラインを見てみると先ほどのリクエストメッセージに対して、HTTP/1.1 200 OKと返しています。
これは「HTTP/1.1というバージョン下でリクエストを受け付けましたよ」という意味を表しています。
この画像に出てくるステータス番号はステータスコードとも呼ばれ、Webアプリケーションの状態を確認する際に非常に便利なものになっております。

### ステータスコード
ステータスコードとはHTTP通信のレスポンスメッセージのステータスライン中にある3桁の数字で、クライアントからのリクエストに対して、サーバからの返答はどのような状態かを提示してくれるのものになります。

ステータスコード |   意味
 - | -
100番台 |  処理が継続中
200番台  | 正常終了
300番台  | リダイレクト
400番台  | クライアント側でのエラー
500番台  | サーバー側でのエラー



<a name="security_basics_cookie"></a>
## セッション/クッキー(cookie)

* 先ほど説明したHTTPは、**ステートレス**な通信となっています。
ステートレスとはサーバが現在の状態を保持せず、ユーザの入力の内容にのみよって出力が決定される状態のことです。

* 状態を保持するために用いられるのがセッションであり、HTTP通信のセッションを管理するために作られた仕組みをクッキー(cookie)といいます。このような通信を**ステートフル**通信といいます。


### セッション

複数回に渡るリクエストにおいて、クライアントを特定するための仕組みです。具体的には、クライアントは初回のリクエストで自身を識別させるIDをサーバーに渡します。以降、サーバーはそのIDを持ってクライアントを認識します。

### クッキー(cookie)

クライアント側のブラウザに保持することができる情報のことです。通常、初回の通信でサーバーがクライアントにクッキーとしてセッションIDを保持させ、以降クライアントはそれを用いてサーバーに対して自身を特定させます。

それでは実際にクッキー(cookie)がどのように使われているかを見ていきましょう。

まず、サーバー側で明示的にクッキー(cookie)を設定しますよ、という宣言をします。
Railsでは、session_store.rbというファイル内でセッションの管理方法を指定します。デフォルトでクッキー(cookie)を利用する設定になっているため、Railsでは意識せずクッキー(cookie)でのセッション管理を行うことができます。

*config/initializer/session_store.rb:*
```ruby
TechReviewSite::Application.config.session_store :cookie_store, key: '_tech_review_site_session'
```

## まとめ

* HTTPとはWebアプリケーションを利用する際にクライアントとサーバ間の情報をやり取りするための通信プロトコルである
* セッションとは、Webアプリケーション上で前のページの状態を保持するために利用される機能である




<a name="xss"></a>
# 3章 表示処理に伴う問題
本章では、Webアプリケーション上になんらかの手段で埋め込まれたスクリプトによって攻撃を行うXSS(クロスサイトスクリプティング)について概要を学び、対策方法を学んでいきます。

<a name="xss_xss"></a>
## XSS（クロスサイトスクリプティング）

Webアプリケーションでは、外部からの入力などに応じて表示が変化する箇所ページを実装したいことがしばしばあります。
しかし、この部分のHTML生成の実装に問題があると、外部よりスクリプトを埋め込まれクッキーを盗まれたり、JavaScriptによる攻撃を受けてしまうおそれがあります。
こういった攻撃手法を**クロスサイトスクリプティング**と言います。

### XSSの攻撃例

では、実際にXSSの脆弱性を用いた攻撃例を見ていきましょう。
ここでは登場人物を用いて説明します。

ユウスケ・・・ 一般ユーザ
タカシ ・・・攻撃を仕掛ける悪意のある者

1. タカシはXSSの脆弱性があるサイトに悪意のあるスクリプトを埋め込む
2. タカシは1.でスクリプトを埋め込んだサイトをリンクに指定する罠サイトを用意する
3. タカシはユウスケに罠サイトへ誘導するようなメールを送信する
4. ユウスケは罠サイトにアクセスし、タカシがスクリプトを埋め込んだサイトにアクセス
5. ユウスケのブラウザ上でタカシが埋め込んだスクリプトが実行される


ここで出てくる罠サイトとは、スクリプトを埋め込んだXSSの脆弱性のあるサイトへのリンクを含んでいるページのことをいいます。

ここで実行されるスクリプトの例としては、cookieを攻撃者のサーバに送信されてしまったり、マルウェア(悪意のあるソフトウェア)を仕込んであるサイトにリダイレクトされウイルスに感染させられたりとJavascriptで記述することが可能なすべての攻撃を受けてしまう可能性があります。


<a name="xss_defence"></a>
## XSSの対策

### 一般的な対策方法
XSSが発生する主要因として、フォームから入力されたHTMLタグがそのままページに反映されてしまっていることがあげられます。
したがって、XSSを防ぐためにはHTMLを生成する際に意味を持つ「"」や「<」を文字参照によってエスケープすることが基本となります。

* **文字参照**

文字参照とはHTML上で直接記述できない特殊文字を表記する際に用いられる記法です。例えば、HTML中に「<」もしくは「>」と記述するとこの二つはタグの初め、終わりと認識されてしまいます。これでは文字列として上記の記号を用いることができません。そこで、文字参照を利用します。

変換前 | 変換後
- | -
<  | & lt;
>  | & gt;
&  | & amp;
"  | & quot;
'  | & #39;


上の表は、XSSを対策する際にエスケープすべき特殊文字の一覧です。これらの特殊文字を文字参照に変換して保存すれば、外部から埋め込まれたスクリプトが実行されることはありません。


### RailsでのXSS対策方法
実はRailsでは、先ほど説明したXSSの対策はあらかじめ行われているのです。
具体的には、Railsのerbという拡張子のついたファイルの中で`<%= %>`で囲まれたものが出力される際は、文字参照の変換が行われた状態で表示されるという仕組みになっています。

あまり使用することはありませんが、この文字参照の変換を無効にすることも可能です。

> 文字参照の変換を無効にする

*/app/views/tweets/_tweet.html.erb:*
```ruby
<div class="content_post" style="background-image: url(<%= tweet.image %>);">
  <% if user_signed_in? && current_user.id == tweet.user_id %>
    <div class="more">
      <span><%= image_tag 'arrow_top.png' %></span>
      <ul class="more_list">
        <li>
          <%= link_to '編集', "/tweets/#{tweet.id}/edit", method: :get %>
        </li>
        <li>
          <%= link_to '削除', "/tweets/#{tweet.id}", method: :delete %>
        </li>
      </ul>
    </div>
  <% end %>
  <p>
    <%= raw(tweet.text) %>
  </p>
  <span class="name"><%= tweet.user.nickname %></span>
</div>
```


* **rawメソッド**

文字列を文字参照にエスケープしないためのヘルパーメソッドです。

```ruby
raw(文字列)
```

これはrawメソッドを使うことによって、文字参照が行われずtextを表示する領域にscriptタグが埋め込まれてしまい、その中に記述されているJavaScriptのコードが実行されるという仕組みになっております。

今回はアラートを出すというコードしか記述していませんが、ここにマルウェアが埋め込まれているサイトへリダイレクトする処理を記述し、リダイレクト先でPCをウイルスに感染させることも可能です。


## まとめ

* XSSとはHTML生成の際の処理に問題があるサイトにスクリプトを埋め込む攻撃手法である
* XSSは主にJavaScriptを埋め込むことによって実現する攻撃なので、JavaScriptで実現可能なすべての攻撃手法を被る可能性がある
* XSSを防ぐにはHTML生成時に意味を持つ特殊文字列を文字参照によりエスケープする





<a name="sql"></a>
# 4章 SQL呼び出しに伴う脆弱性
4章ではここ数年Webアプリケーションへの攻撃事例としてはもっとも多い件数が報告されている、SQLインジェクションの概要と対策方法を学習します。
まずは、概要を学び一般的な対策例を理解した上でRailsアプリケーションにおける対策方法を説明します。


<a name="sql_sql"></a>
## SQLインジェクションとは何か

アプリケーションのSQLの呼び出し方においてセキュリティ上の不備を意図的に利用し、データベースシステムを不正に操作する攻撃方法のことです。
入力フォームから送信した値によりアプリケーションが想定しないSQL文を実行させ、攻撃を行います。

アプリケーション上にSQLインジェクションの脆弱性があることによって、以下のような被害を受ける可能性があります。

* データベース内のすべての情報が外部から盗まれる
* データベースの内容が書き換えられる
* IDとパスワードを用いずにログインされる(不正ログイン)
* その他、データベースサーバー上のファイルの読み出し、書き込み、プログラムの実行などを行われる


<a name="sql_defence"></a>
## SQLインジェクションの攻撃例・対策

ここではSQLインジェクション攻撃によってパスワードを用いずに認証を回避し不正アクセスするという攻撃を例にとり、対策例を説明していきます。

### 一般的な対策方法
SQLインジェクションの原因は、ユーザからの入力がアプリケーション内部でSQL文として解釈されてしまい、実行されてしまうことが挙げられます。
そのため、SQLインジェクション脆弱性を解消するためには、SQL文を組み立て実行される際にSQL文を変更されることを防ぐことです。
SQL文の変更を防ぐには以下の対策方法があります。

* SQL文中で意味を持つ特殊文字をエスケープする
* バインド機構を利用する


#### SQL文中で意味を持つ特殊文字をエスケープする
SQL文中では「'」が文字列の終端、「/」がエスケープ文字を意味しています。例えばデータベース内の格納されたuser_idとpasswordが一致したら、認証を認めるアプリケーションを考えてみましょう。

ここで、認証に用いられるSQL文は以下になります。
```sql
# $uidと$pwdはユーザのフォームの入力値
SELECT * FROM user WHERE user_id='$uid' AND password='$pwd'
```


ここに、以下のように入力します。
```sql
$uid  tarou
$pwd  ' OR 'A'='A
```

すると前述のSQL文は以下のようになります。
```sql
SELECT * FROM user WHERE user_id='tarou' AND password='' OR 'A'='A'
```

もし、特殊文字である「'」をエスケープしていなかった場合、WHERE句の中ではuser_id='tarou' AND password=''と'A'='A'の二つの条件を判定することになります。この二つの文はORでつながっているため、どちらかがtrueの場合は認証が認められてしまいます。'A'='A'は確実にtrueのため、user_idとpasswordが一致していなくても認証が通ってしまいます。

しかし、特殊文字をきちんとエスケープした場合はユーザからの入力の「'」は単なる文字列として扱われるため、password=' ' OR 'A'='A(文字列) 'となり、SQL文は実行されません。


#### バインド機構を利用する
バインド機構とは、ユーザからの値を割り振る前に、そのままデータベースを処理するところに送られ、SQL文の構造を確定する仕組みのことです。
SQL文確定後にユーザからの値を入れて実行するためユーザの入力値によってSQL文が変更されることはありません。

先ほどの例を用いると、以下のSQL文を処理を行う前にデータベースエンジンに送信します。

ここで、user_idとpasswordの値として「?」が使われていると思いますが、これを`プレースホルダー`といいます。プレースホルダーはユーザの値が入力されるまでの一時的な値のようなものとなります。
```sql
SELECT * FROM user WHERE user_id=? AND password=?
```
こうすることによって、「ユーザテーブルにおいてuser_idとpasswordの組み合わせが一致するかどうかを判定できる」という構文が確定します。
つまり、この後ユーザからどんな値が入力されようとも上記の構文の中でSQLが実行されることになり、SQLインジェクションを防ぐことが可能になります。




### RailsでのSQLインジェクション対策
Railsではヘルパーメソッドが優秀なため、みなさんがRailsアプリケーションで使用したActiveRecordを使用する場合はRailsアプリケーションにおいてSQLインジェクションが問題になることはほとんどありません。

しかしActiveRecordの発行するSQL文では、アプリケーションの機能として要件を満たせない場合があります。そういった場合は直接SQL文を記述しなければなりません。
この時に使われるのがfind_by_sqlです。そして、このfind_by_sqlメソッドにSQLインジェクションの脆弱性が潜んでいるので、使用する際は注意が必要です。

* **find_by_sql**

SQL文を直接書いて、レコードを取得するメソッドです。
以下はusersテーブルから全てのレコードを取得する処理をfind_by_sqlメソッドを使った例です。ActiveRecordとは異なり直接SQL文を記述します。

```sql
User.find_by_sql('select * from users')
```


* **実際にfind_by_sqlメソッドにSQLインジェクションの脆弱性が潜んでいることをRailsアプリケーション2で実装したmoooviを例に見ていきましょう。**

> 映画作品の検索機能にSQLインジェクションの脆弱性を作り込む

*app/controllers/products_controller.rb:*
```ruby
def search
  @products = Product.find_by_sql("select * from products where title like '%#{params[:keyword]}%' LIMIT 20")
end
```

編集が終わりましたら、rails sを実行しサーバを起動し`http://localhost:3000/products/search`にアクセスしましょう。

次に、検索のテキストボックスに以下のように入力して実行してみましょう。

```
' OR 'A'='A
```

この記述は最初のシングルクォーテーションでプログラム側のSQL文を終了させ、
OR 'A'='Aの部分でtrueにすることによって、処理を通します。よってすべての映画作品が表示されているということになります。

#### プレースホルダーを使い外部からのSQL文の実行を防ぐ

*app/controllers/products_controller.rb:*
```ruby
def search
  keyword = "%#{params[:keyword]}%"
  @products = Product.find_by_sql(["select * from products where title like ? LIMIT 20", keyword])
end
```

keywordという変数に入力値のparams[:keyword]を展開し、それをLIKE句で検索するために%で囲っています。
find_by_sql内ではプレースホルダー ? をいれることによって、ユーザの入力を適用する前にSQL文を確定します。

これは入力値である「' OR 'A'='A」が単純な文字列として扱われているので、映画作品の中に一致するものはないからです。
このようにプレースホルダーを使うことによって、SQL文を入力値を適用する前に確定するので、その後入力されるものがSQLインジェクションを突く攻撃コードだとしても文字列として扱われるため安全になります。

## まとめ

* SQLインジェクションとは外部からの入力により、アプリケーションが想定しないSQL文を実行することによって、認証を突破したり情報を盗んだりする攻撃手法のことである。
* SQLインジェクションを防ぐには、SQL文中で意味をもつ「`」や「/」のエスケープやバインド機構を用いることが必要である。
* Railsアプリケーションでfind_by_sqlを用いる際は正しい対策を講じることが重要である。





<a name="csrf"></a>
# 5章「重要な処理」に伴う脆弱性

本章では、Webアプリケーション内でログインした利用者のアカウントにより取り消しのできない重要な処理が実行できるものがあります。ここでいう「重要な処理」とはECサイトでのクレジットカードでの決済やメールの送信、パスワードの変更などのことをいいます。

こういった重要な処理の過程で不備があると、クロスサイトリクエストフォージェリ(以下CSRFと省略)の脆弱性が生じる場合があります。CSRFは「シーサーフ」もしくは「シーエスアールエフ」と呼ばれます。


<a name="csrf_csrf"></a>
## CSRF(クロスサイトリクエストフォージェリ)

### CSRFとは
Webサイトにスクリプトや自動転送（HTTPリダイレクト）を仕込むことによって、利用者に意図せず別のWebサイト上で何らかの操作（掲示板への書き込みや銀行口座への送金など）を行わせる攻撃手法のことをいいます。
CSRFの脆弱性が存在すると以下のような被害を被る可能性があります。

* 利用者のアカウントによる物品の購入
* 利用者の退会処理
* 利用者のアカウントによる掲示板への書き込み
* 利用者のパスワードやメールアドレスが変更

CSRF脆弱性の影響は「重要な処理」の悪用に限られるため、CSRFの脆弱性を個人情報の取得等に用いることはできません。

### CSRFの攻撃例

ここでは、利用者が罠サイトを閲覧することにパスワードが変更されてしまう例を見ていただきます。

1. 利用者がexample.jpにログインしている
2. 攻撃者は罠を作成
3. 利用者が罠を閲覧する
4. 罠のJavaScriptによる、被害者のブラウザ上で攻撃対象サイトに対し、新しいパスワードabcdefがPOSTメソッドにより送信される
5. パスワードが変更される


<a name="csrf_defence"></a>
## CSRFの対策

### 一般的な対策方法
CSRF攻撃を防ぐには、「重要な処理」に対するリクエストが利用者の意図によるものかどうかを確認することが必要になります。
このためCSRF対策としては、以下の2点が考えられます。

* CSRF対策の必要なページを区別する
* 正規利用者の意図したリクエストを区別できるように実装する

#### CSRF対策の必要なページを区別する
CSRF対策はすべてのページに行う必要はありません。むしろ、対策の必要がないページの方が多いのです。対策に必要なページは、他のサイトから勝手に実行されては困るようなページです。例えば、ECサイトの物品購入ページや、パスワード変更などの個人情報編集などの確定画面などが挙げられます。

CSRFの対策としては、まず実装するWebアプリケーションのどのページに脆弱性対策が必要なのか設計段階で明らかにすることです。

#### 正規利用者の意図したリクエストを区別できるように実装する
CSRF対策で必要なことは、正規利用者の意図したリクエストなのかどうかということです。
ここでの意図したリクエストとは、利用者が対象のアプリケーション上で「実行」ボタンなどを押して、「重要な処理」をリクエストを発行することをいいます。

正規のリクエストかどうかを判断する方法は3種類あります。

* 秘密情報の埋め込み
* パスワードの再入力
* Refererのチェック

Refererによるチェックは少し難しいので、上の二つについて説明します。

##### 秘密情報の埋め込み
登録画面や注文確定画面などのCSRF攻撃への対策が必要なページに対して、第三者の不正利用者が知り得ない秘密情報を要求するようにすれば、不正リクエストによる重要な処理が実行されることはありません。このような目的で使用される秘密情報のことをトークンといいます。

##### パスワードの再入力
こちらは文字通り重要な処理が確定する前に、再度パスワードを入力してもらいます。これはCSRF対策の他にも物品の購入などに先立って、利用者の意思の念押しをしたり、共用のPCにおいて正規の利用者以外の利用者が、重要な処理を実行するのを防いだりする効果があります。
CSRFの攻撃例として、とりあげたパスワード変更ページにも現在のパスワードを再入力させることによりCSRF攻撃を防ぐことが可能です。
しかし、対策が必要なページ以外でパスワードの再入力を求めるページが複数あると煩雑なアプリケーションになってしまうため、注意が必要です。


### RailsでのCSRF対策方法

それではRailsではどのようにCSRF対策を行っていけばいいのでしょうか。
実は、Rails側できちんと対策を行ってくれています。基本的には開発者はなにもしなくても大丈夫です。

それでは実際にRailsがどのようにCSRF対策を行っているか見ていきましょう。

*/projects/pictweet/app/controllers/application_controller.rb:*
```ruby
class ApplicationController < ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception

  before_action :configure_permitted_parameters, if: :devise_controller?

  def configure_permitted_parameters
    devise_parameter_sanitizer.for(:sign_up) << :nickname
  end
end
```


`protect_from_forgery with: :exception`
記述があるかと思います。これがRailsアプリケーション内でCSRF対策を行うというという命令になります。こちらをすべてのコントローラの親である`application_controller.rb`に記述することによって、その子コントローラすべてに先ほど説明したようなCSRF対策をRails側で行ってくれます。



## まとめ

* CSRFとはアプリケーション内で重要な処理が行われる場所で発生する攻撃手法である
* CSRFを防ぐにはトークンを埋め込んだり、パスワードを再入力させたり、ページ遷移の際正規利用者しか知り得ない情報を用いることが有効
* RailsでCSRF対策を行う際はコントローラ内にprotect_from_forgeryメソッドを記述する




<a name="session"></a>
# 6章 セッション管理の不備

Webアプリケーションで認証結果などの現在の状態を記憶する手段として、セッションが用いられていました。現在セッション管理として主流になっているのがクッキーなどにセッションIDを記憶させ、これをキーとしてサーバ側に現在の状態を記憶させるという方法です。

<a name="session_session"></a>
## セッションハイジャックとは

セッションハイジャックとは名前の通り、なんらかの方法を用いて正規利用者ではないものが他人のセッションIDを乗っ取る攻撃手法です。
セッションハイジャックが行われた場合、アプリケーション内で正規の利用者ができることはほとんど実行が可能なので、正規利用者の個人情報閲覧、送金や物品購入、なりすましメールの送信やSNSへの犯罪予告など正規利用者への被害はとても大きくなります。

<a name="session_defence"></a>
## セッションハイジャックの攻撃手法・対策

それでは実際にセッションハイジャックはどのように行われているか見ていきましょう。
具体的な攻撃手法としては以下の3つが挙げられます。

* セッションIDの推測
* セッションIDの盗み出し
* セッションIDの強制

3つの攻撃手法に合わせて対策方法もご紹介していきます。

### セッションIDの推測

Webアプリケーションに用いられるセッションIDの生成規則に問題があると、第三者にセッションIDが予測され、悪用されてしまう可能性があります。
生成規則に問題があるセッションIDは以下のようなものを元に生成されているものが多いです。

* ユーザIDやメールアドレス
* リモートIPアドレス
* 日時
* 乱数

上記のものをそのまま使う場合や、本カリキュラムでは詳しくお話ししませんがエンコードやハッシュ計算というものと合わせて利用される場合があります。
このうちユーザIDや日時は外部から参照可能なためセッションIDを推測することが可能になります。

このような推測可能なセッションIDの生成を回避するためには、Webアプリケーション開発ツールが持つセッション管理機構を利用することが安全とされています。
主要なアプリケーション開発ツールのセッション管理機構に脆弱性が発見された場合、セキュリティ研究者によって指摘されすぐに改善されることが見込まれます。
そのため、セッションIDの生成は独自の機構で行うのではなく、開発ツールによるものにするとセッションIDを推測されることはほとんどなくなります。


### セッションIDの盗み出し

セキュリティに不備のあるネットワークではセッションIDとして利用されるcookieを盗聴されてしまう可能性があります。暗号化されていない無線LANは、まさにそのようなネットワークの一例です。ネットワークの領域になってしまうので本カリキュラムでは詳しく取り上げませんが、SSLというネットワークを暗号化するプロトコルがあります。
セッションIDの盗聴を防ぐには、このように通信経路を意識することも重要になります。

* **SSL**

SSLとはSecure Socket Layerの略で、インターネット上の通信を暗号化してくれる技術です。これにより、第三者からの情報の盗聴や改ざんを防ぐことができます。
したがって、セッションIDのような重要な情報をやりとりする際はSSLを使うと機密性・完全性を保つことができます。

### セッションIDの強制

ここまでは正規利用者に設定されたセッションIDを推測したり、盗み出して利用する手法でしたが、セッションIDを悪意のある第三者が外部から強制させる方法があり、これをセッションIDの固定化といいます。

セッションIDの固定化は以下の手順で行われます。

1. 悪意のある第三者は普通の利用者としてセッションID(abc123)を取得
2. 被害者に対して1.で取得したセッションIDを強制
3. 被害者は標的アプリケーションにログイン
4. 悪意のある第三者は、被害者に強制したセッションID(123abc)を使って標的アプリケーションにアクセスする

Webアプリケーション側でセッションIDの固定化攻撃に対策する方法として、認証が完了した時点でセッションIDを変更するという方法があります。

そうすることにより、認証前にセッションIDが固定されたとしても、認証後にセッションIDが変わるため固定されたセッションIDでアクセスしようと試みる悪意のある第三者は認証されておらず攻撃は成功しません。


<a name="session_rails"></a>
## Railsでのセッションハイジャック対策方法

Railsでのセッションハイジャックの対策も非常に簡単に行うことができます。
まず、セッションの盗聴についてですが`/pictweet/config/environments/production.rb`の

*/pictweet/config/environments/production.rb:*
```ruby
config.force_ssl = true
```
記述のコメントアウトを外してあげましょう。これにより、本番環境で環境アプリケーションを公開する際に先ほど紹介したSSLを使い通信経路を暗号化してくれるため、セッションIDの盗聴を防ぐことが可能になります。

セッション固定化攻撃に関してもRailsでは1行のコードで対策することが可能です。
対策として、ログイン成功後に古いセッションを無効にし新しいセッションIDを発行するという方法があります。

```sh
reset_session
```
上の1行をセッションを再発行したいアクション内に指定することにより、セッションは再発行されセッション固定化攻撃を防ぐことができるようになります。




## まとめ

* セッションハイジャックによる被害は正規利用者として実行できるすべてのことすべてのことが想定される
* セッションIDを生成する際は開発ツールの機構を使用する
* 認証成功後セッションを再発行する

























